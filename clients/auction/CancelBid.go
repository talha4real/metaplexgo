// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package auction

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Cancel a bid on a running auction.
type CancelBid struct {
	Args *CancelBidArgs

	// [0] = [SIGNER] biddersPrimaryAccount
	// ··········· The bidders primary account, for PDA calculation/transit auth.
	//
	// [1] = [WRITE] biddersTokenAccount
	// ··········· The bidders token account they'll receive refund with
	//
	// [2] = [WRITE] pot
	// ··········· The pot, containing a reference to the stored SPL token account.
	//
	// [3] = [WRITE] potSPLAccount
	// ··········· The pot SPL account, where the tokens will be deposited.
	//
	// [4] = [WRITE] metadataAccount
	// ··········· The metadata account, storing information about the bidders actions.
	//
	// [5] = [WRITE] auctionAccount
	// ··········· Auction account, containing data about the auction and item being bid on.
	//
	// [6] = [WRITE] tokenMint
	// ··········· Token mint, for transfer instructions and verification.
	//
	// [7] = [] clockSysvar
	// ··········· Clock sysvar
	//
	// [8] = [] rentSysvar
	// ··········· Rent sysvar
	//
	// [9] = [] systemProgram
	// ··········· System program
	//
	// [10] = [] splTokenProgram
	// ··········· SPL Token Program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCancelBidInstructionBuilder creates a new `CancelBid` instruction builder.
func NewCancelBidInstructionBuilder() *CancelBid {
	nd := &CancelBid{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *CancelBid) SetArgs(args CancelBidArgs) *CancelBid {
	inst.Args = &args
	return inst
}

// SetBiddersPrimaryAccount sets the "biddersPrimaryAccount" account.
// The bidders primary account, for PDA calculation/transit auth.
func (inst *CancelBid) SetBiddersPrimaryAccount(biddersPrimaryAccount ag_solanago.PublicKey) *CancelBid {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(biddersPrimaryAccount).SIGNER()
	return inst
}

// GetBiddersPrimaryAccount gets the "biddersPrimaryAccount" account.
// The bidders primary account, for PDA calculation/transit auth.
func (inst *CancelBid) GetBiddersPrimaryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetBiddersTokenAccount sets the "biddersTokenAccount" account.
// The bidders token account they'll receive refund with
func (inst *CancelBid) SetBiddersTokenAccount(biddersTokenAccount ag_solanago.PublicKey) *CancelBid {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(biddersTokenAccount).WRITE()
	return inst
}

// GetBiddersTokenAccount gets the "biddersTokenAccount" account.
// The bidders token account they'll receive refund with
func (inst *CancelBid) GetBiddersTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetPotAccount sets the "pot" account.
// The pot, containing a reference to the stored SPL token account.
func (inst *CancelBid) SetPotAccount(pot ag_solanago.PublicKey) *CancelBid {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(pot).WRITE()
	return inst
}

// GetPotAccount gets the "pot" account.
// The pot, containing a reference to the stored SPL token account.
func (inst *CancelBid) GetPotAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetPotSPLAccount sets the "potSPLAccount" account.
// The pot SPL account, where the tokens will be deposited.
func (inst *CancelBid) SetPotSPLAccount(potSPLAccount ag_solanago.PublicKey) *CancelBid {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(potSPLAccount).WRITE()
	return inst
}

// GetPotSPLAccount gets the "potSPLAccount" account.
// The pot SPL account, where the tokens will be deposited.
func (inst *CancelBid) GetPotSPLAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetMetadataAccount sets the "metadataAccount" account.
// The metadata account, storing information about the bidders actions.
func (inst *CancelBid) SetMetadataAccount(metadataAccount ag_solanago.PublicKey) *CancelBid {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(metadataAccount).WRITE()
	return inst
}

// GetMetadataAccount gets the "metadataAccount" account.
// The metadata account, storing information about the bidders actions.
func (inst *CancelBid) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetAuctionAccount sets the "auctionAccount" account.
// Auction account, containing data about the auction and item being bid on.
func (inst *CancelBid) SetAuctionAccount(auctionAccount ag_solanago.PublicKey) *CancelBid {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(auctionAccount).WRITE()
	return inst
}

// GetAuctionAccount gets the "auctionAccount" account.
// Auction account, containing data about the auction and item being bid on.
func (inst *CancelBid) GetAuctionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetTokenMintAccount sets the "tokenMint" account.
// Token mint, for transfer instructions and verification.
func (inst *CancelBid) SetTokenMintAccount(tokenMint ag_solanago.PublicKey) *CancelBid {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenMint).WRITE()
	return inst
}

// GetTokenMintAccount gets the "tokenMint" account.
// Token mint, for transfer instructions and verification.
func (inst *CancelBid) GetTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

// SetClockSysvarAccount sets the "clockSysvar" account.
// Clock sysvar
func (inst *CancelBid) SetClockSysvarAccount(clockSysvar ag_solanago.PublicKey) *CancelBid {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(clockSysvar)
	return inst
}

// GetClockSysvarAccount gets the "clockSysvar" account.
// Clock sysvar
func (inst *CancelBid) GetClockSysvarAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7]
}

// SetRentSysvarAccount sets the "rentSysvar" account.
// Rent sysvar
func (inst *CancelBid) SetRentSysvarAccount(rentSysvar ag_solanago.PublicKey) *CancelBid {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(rentSysvar)
	return inst
}

// GetRentSysvarAccount gets the "rentSysvar" account.
// Rent sysvar
func (inst *CancelBid) GetRentSysvarAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[8]
}

// SetSystemProgramAccount sets the "systemProgram" account.
// System program
func (inst *CancelBid) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CancelBid {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
// System program
func (inst *CancelBid) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[9]
}

// SetSplTokenProgramAccount sets the "splTokenProgram" account.
// SPL Token Program
func (inst *CancelBid) SetSplTokenProgramAccount(splTokenProgram ag_solanago.PublicKey) *CancelBid {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(splTokenProgram)
	return inst
}

// GetSplTokenProgramAccount gets the "splTokenProgram" account.
// SPL Token Program
func (inst *CancelBid) GetSplTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[10]
}

func (inst CancelBid) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_CancelBid),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CancelBid) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CancelBid) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.BiddersPrimaryAccount is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.BiddersTokenAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Pot is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PotSPLAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.MetadataAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.AuctionAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.ClockSysvar is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.RentSysvar is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SplTokenProgram is not set")
		}
	}
	return nil
}

func (inst *CancelBid) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CancelBid")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" biddersPrimary", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("   biddersToken", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("            pot", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("         potSPL", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("       metadata", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("        auction", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta("      tokenMint", inst.AccountMetaSlice[6]))
						accountsBranch.Child(ag_format.Meta("    clockSysvar", inst.AccountMetaSlice[7]))
						accountsBranch.Child(ag_format.Meta("     rentSysvar", inst.AccountMetaSlice[8]))
						accountsBranch.Child(ag_format.Meta("  systemProgram", inst.AccountMetaSlice[9]))
						accountsBranch.Child(ag_format.Meta("splTokenProgram", inst.AccountMetaSlice[10]))
					})
				})
		})
}

func (obj CancelBid) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CancelBid) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewCancelBidInstruction declares a new CancelBid instruction with the provided parameters and accounts.
func NewCancelBidInstruction(
	// Parameters:
	args CancelBidArgs,
	// Accounts:
	biddersPrimaryAccount ag_solanago.PublicKey,
	biddersTokenAccount ag_solanago.PublicKey,
	pot ag_solanago.PublicKey,
	potSPLAccount ag_solanago.PublicKey,
	metadataAccount ag_solanago.PublicKey,
	auctionAccount ag_solanago.PublicKey,
	tokenMint ag_solanago.PublicKey,
	clockSysvar ag_solanago.PublicKey,
	rentSysvar ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	splTokenProgram ag_solanago.PublicKey) *CancelBid {
	return NewCancelBidInstructionBuilder().
		SetArgs(args).
		SetBiddersPrimaryAccount(biddersPrimaryAccount).
		SetBiddersTokenAccount(biddersTokenAccount).
		SetPotAccount(pot).
		SetPotSPLAccount(potSPLAccount).
		SetMetadataAccount(metadataAccount).
		SetAuctionAccount(auctionAccount).
		SetTokenMintAccount(tokenMint).
		SetClockSysvarAccount(clockSysvar).
		SetRentSysvarAccount(rentSysvar).
		SetSystemProgramAccount(systemProgram).
		SetSplTokenProgramAccount(splTokenProgram)
}
