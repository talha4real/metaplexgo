// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Given an authority token minted by the Printing mint of a master edition, and a brand new non-metadata-ed mint with one token
// make a new Metadata + Edition that is a child of the master edition denoted by this authority token.
type DeprecatedMintNewEditionFromMasterEditionViaPrintingToken struct {

	// [0] = [WRITE] newMetadataKey
	// ··········· New Metadata key (pda of ['metadata', program id, mint id])
	//
	// [1] = [WRITE] newEditionV1
	// ··········· New Edition V1 (pda of ['metadata', program id, mint id, 'edition'])
	//
	// [2] = [WRITE] masterRecordEditionV1
	// ··········· Master Record Edition V1 (pda of ['metadata', program id, master metadata mint id, 'edition'])
	//
	// [3] = [WRITE] mintOfNewToken
	// ··········· Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY
	//
	// [4] = [SIGNER] mintAuthority
	// ··········· Mint authority of new mint
	//
	// [5] = [WRITE] printingMint
	// ··········· Printing Mint of master record edition
	//
	// [6] = [WRITE] tokenAccount
	// ··········· Token account containing Printing mint token to be transferred
	//
	// [7] = [WRITE] editionPDA
	// ··········· Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master mint id, edition_number])
	//
	// [8] = [SIGNER] burnAuthority
	// ··········· Burn authority for this token
	//
	// [9] = [SIGNER] payer
	// ··········· payer
	//
	// [10] = [] updateAuthority
	// ··········· update authority info for new metadata account
	//
	// [11] = [] masterRecordMetadata
	// ··········· Master record metadata account
	//
	// [12] = [] tokenProgram
	// ··········· Token program
	//
	// [13] = [] system
	// ··········· System program
	//
	// [14] = [] rent
	// ··········· Rent info
	//
	// [15] = [WRITE] reservationList
	// ··········· [optional] Reservation List - If present, and you are on this list, you can get
	// ··········· an edition number given by your position on the list.
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionBuilder creates a new `DeprecatedMintNewEditionFromMasterEditionViaPrintingToken` instruction builder.
func NewDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionBuilder() *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken {
	nd := &DeprecatedMintNewEditionFromMasterEditionViaPrintingToken{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 16),
	}
	return nd
}

// SetNewMetadataKeyAccount sets the "newMetadataKey" account.
// New Metadata key (pda of ['metadata', program id, mint id])
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) SetNewMetadataKeyAccount(newMetadataKey ag_solanago.PublicKey) *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(newMetadataKey).WRITE()
	return inst
}

// GetNewMetadataKeyAccount gets the "newMetadataKey" account.
// New Metadata key (pda of ['metadata', program id, mint id])
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) GetNewMetadataKeyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetNewEditionV1Account sets the "newEditionV1" account.
// New Edition V1 (pda of ['metadata', program id, mint id, 'edition'])
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) SetNewEditionV1Account(newEditionV1 ag_solanago.PublicKey) *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(newEditionV1).WRITE()
	return inst
}

// GetNewEditionV1Account gets the "newEditionV1" account.
// New Edition V1 (pda of ['metadata', program id, mint id, 'edition'])
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) GetNewEditionV1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMasterRecordEditionV1Account sets the "masterRecordEditionV1" account.
// Master Record Edition V1 (pda of ['metadata', program id, master metadata mint id, 'edition'])
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) SetMasterRecordEditionV1Account(masterRecordEditionV1 ag_solanago.PublicKey) *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(masterRecordEditionV1).WRITE()
	return inst
}

// GetMasterRecordEditionV1Account gets the "masterRecordEditionV1" account.
// Master Record Edition V1 (pda of ['metadata', program id, master metadata mint id, 'edition'])
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) GetMasterRecordEditionV1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintOfNewTokenAccount sets the "mintOfNewToken" account.
// Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) SetMintOfNewTokenAccount(mintOfNewToken ag_solanago.PublicKey) *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mintOfNewToken).WRITE()
	return inst
}

// GetMintOfNewTokenAccount gets the "mintOfNewToken" account.
// Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) GetMintOfNewTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMintAuthorityAccount sets the "mintAuthority" account.
// Mint authority of new mint
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) SetMintAuthorityAccount(mintAuthority ag_solanago.PublicKey) *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(mintAuthority).SIGNER()
	return inst
}

// GetMintAuthorityAccount gets the "mintAuthority" account.
// Mint authority of new mint
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) GetMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPrintingMintAccount sets the "printingMint" account.
// Printing Mint of master record edition
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) SetPrintingMintAccount(printingMint ag_solanago.PublicKey) *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(printingMint).WRITE()
	return inst
}

// GetPrintingMintAccount gets the "printingMint" account.
// Printing Mint of master record edition
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) GetPrintingMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenAccount sets the "tokenAccount" account.
// Token account containing Printing mint token to be transferred
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) SetTokenAccount(tokenAccount ag_solanago.PublicKey) *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenAccount).WRITE()
	return inst
}

// GetTokenAccount gets the "tokenAccount" account.
// Token account containing Printing mint token to be transferred
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) GetTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetEditionPDAAccount sets the "editionPDA" account.
// Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master mint id, edition_number])
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) SetEditionPDAAccount(editionPDA ag_solanago.PublicKey) *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(editionPDA).WRITE()
	return inst
}

// GetEditionPDAAccount gets the "editionPDA" account.
// Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master mint id, edition_number])
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) GetEditionPDAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetBurnAuthorityAccount sets the "burnAuthority" account.
// Burn authority for this token
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) SetBurnAuthorityAccount(burnAuthority ag_solanago.PublicKey) *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(burnAuthority).SIGNER()
	return inst
}

// GetBurnAuthorityAccount gets the "burnAuthority" account.
// Burn authority for this token
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) GetBurnAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPayerAccount sets the "payer" account.
// payer
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) SetPayerAccount(payer ag_solanago.PublicKey) *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(payer).SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// payer
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetUpdateAuthorityAccount sets the "updateAuthority" account.
// update authority info for new metadata account
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) SetUpdateAuthorityAccount(updateAuthority ag_solanago.PublicKey) *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(updateAuthority)
	return inst
}

// GetUpdateAuthorityAccount gets the "updateAuthority" account.
// update authority info for new metadata account
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) GetUpdateAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetMasterRecordMetadataAccount sets the "masterRecordMetadata" account.
// Master record metadata account
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) SetMasterRecordMetadataAccount(masterRecordMetadata ag_solanago.PublicKey) *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(masterRecordMetadata)
	return inst
}

// GetMasterRecordMetadataAccount gets the "masterRecordMetadata" account.
// Master record metadata account
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) GetMasterRecordMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
// Token program
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
// Token program
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetSystemAccount sets the "system" account.
// System program
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) SetSystemAccount(system ag_solanago.PublicKey) *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(system)
	return inst
}

// GetSystemAccount gets the "system" account.
// System program
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) GetSystemAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetRentAccount sets the "rent" account.
// Rent info
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) SetRentAccount(rent ag_solanago.PublicKey) *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
// Rent info
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetReservationListAccount sets the "reservationList" account.
// [optional] Reservation List - If present, and you are on this list, you can get
// an edition number given by your position on the list.
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) SetReservationListAccount(reservationList ag_solanago.PublicKey) *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(reservationList).WRITE()
	return inst
}

// GetReservationListAccount gets the "reservationList" account (optional).
// [optional] Reservation List - If present, and you are on this list, you can get
// an edition number given by your position on the list.
func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) GetReservationListAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

func (inst DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_DeprecatedMintNewEditionFromMasterEditionViaPrintingToken),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.NewMetadataKey is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.NewEditionV1 is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MasterRecordEditionV1 is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MintOfNewToken is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.MintAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.PrintingMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.EditionPDA is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.BurnAuthority is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.UpdateAuthority is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.MasterRecordMetadata is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.System is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.Rent is not set")
		}

		// [15] = ReservationList is optional

	}
	return nil
}

func (inst *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DeprecatedMintNewEditionFromMasterEditionViaPrintingToken")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=16]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       newMetadataKey", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         newEditionV1", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("masterRecordEditionV1", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       mintOfNewToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        mintAuthority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         printingMint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                token", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("           editionPDA", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        burnAuthority", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                payer", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("      updateAuthority", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta(" masterRecordMetadata", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("         tokenProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("               system", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("                 rent", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("      reservationList", inst.AccountMetaSlice.Get(15)))
					})
				})
		})
}

func (obj DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstruction declares a new DeprecatedMintNewEditionFromMasterEditionViaPrintingToken instruction with the provided parameters and accounts.
func NewDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstruction(
	// Accounts:
	newMetadataKey ag_solanago.PublicKey,
	newEditionV1 ag_solanago.PublicKey,
	masterRecordEditionV1 ag_solanago.PublicKey,
	mintOfNewToken ag_solanago.PublicKey,
	mintAuthority ag_solanago.PublicKey,
	printingMint ag_solanago.PublicKey,
	tokenAccount ag_solanago.PublicKey,
	editionPDA ag_solanago.PublicKey,
	burnAuthority ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	updateAuthority ag_solanago.PublicKey,
	masterRecordMetadata ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	system ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	reservationList ag_solanago.PublicKey) *DeprecatedMintNewEditionFromMasterEditionViaPrintingToken {
	return NewDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionBuilder().
		SetNewMetadataKeyAccount(newMetadataKey).
		SetNewEditionV1Account(newEditionV1).
		SetMasterRecordEditionV1Account(masterRecordEditionV1).
		SetMintOfNewTokenAccount(mintOfNewToken).
		SetMintAuthorityAccount(mintAuthority).
		SetPrintingMintAccount(printingMint).
		SetTokenAccount(tokenAccount).
		SetEditionPDAAccount(editionPDA).
		SetBurnAuthorityAccount(burnAuthority).
		SetPayerAccount(payer).
		SetUpdateAuthorityAccount(updateAuthority).
		SetMasterRecordMetadataAccount(masterRecordMetadata).
		SetTokenProgramAccount(tokenProgram).
		SetSystemAccount(system).
		SetRentAccount(rent).
		SetReservationListAccount(reservationList)
}
