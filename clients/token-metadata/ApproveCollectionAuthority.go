// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Approve another account to verify nfts beloging to a collection, [verify_collection] on the collection NFT
type ApproveCollectionAuthority struct {

	// [0] = [WRITE] collectionAuthorityRecordPDA
	// ··········· Collection Authority Record PDA
	//
	// [1] = [SIGNER] collectionUpdateAuthority
	// ··········· Update Authority of Collection NFT
	//
	// [2] = [SIGNER] payer
	// ··········· Payer
	//
	// [3] = [] collectionAuthority
	// ··········· A Collection Authority
	//
	// [4] = [] collectionMetadata
	// ··········· Collection Metadata account
	//
	// [5] = [] collectionMint
	// ··········· Mint of Collection Metadata
	//
	// [6] = [] tokenProgram
	// ··········· Token program
	//
	// [7] = [] system
	// ··········· System program
	//
	// [8] = [] rent
	// ··········· Rent info
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewApproveCollectionAuthorityInstructionBuilder creates a new `ApproveCollectionAuthority` instruction builder.
func NewApproveCollectionAuthorityInstructionBuilder() *ApproveCollectionAuthority {
	nd := &ApproveCollectionAuthority{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetCollectionAuthorityRecordPDAAccount sets the "collectionAuthorityRecordPDA" account.
// Collection Authority Record PDA
func (inst *ApproveCollectionAuthority) SetCollectionAuthorityRecordPDAAccount(collectionAuthorityRecordPDA ag_solanago.PublicKey) *ApproveCollectionAuthority {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(collectionAuthorityRecordPDA).WRITE()
	return inst
}

// GetCollectionAuthorityRecordPDAAccount gets the "collectionAuthorityRecordPDA" account.
// Collection Authority Record PDA
func (inst *ApproveCollectionAuthority) GetCollectionAuthorityRecordPDAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetCollectionUpdateAuthorityAccount sets the "collectionUpdateAuthority" account.
// Update Authority of Collection NFT
func (inst *ApproveCollectionAuthority) SetCollectionUpdateAuthorityAccount(collectionUpdateAuthority ag_solanago.PublicKey) *ApproveCollectionAuthority {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(collectionUpdateAuthority).SIGNER()
	return inst
}

// GetCollectionUpdateAuthorityAccount gets the "collectionUpdateAuthority" account.
// Update Authority of Collection NFT
func (inst *ApproveCollectionAuthority) GetCollectionUpdateAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPayerAccount sets the "payer" account.
// Payer
func (inst *ApproveCollectionAuthority) SetPayerAccount(payer ag_solanago.PublicKey) *ApproveCollectionAuthority {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(payer).SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// Payer
func (inst *ApproveCollectionAuthority) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetCollectionAuthorityAccount sets the "collectionAuthority" account.
// A Collection Authority
func (inst *ApproveCollectionAuthority) SetCollectionAuthorityAccount(collectionAuthority ag_solanago.PublicKey) *ApproveCollectionAuthority {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(collectionAuthority)
	return inst
}

// GetCollectionAuthorityAccount gets the "collectionAuthority" account.
// A Collection Authority
func (inst *ApproveCollectionAuthority) GetCollectionAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetCollectionMetadataAccount sets the "collectionMetadata" account.
// Collection Metadata account
func (inst *ApproveCollectionAuthority) SetCollectionMetadataAccount(collectionMetadata ag_solanago.PublicKey) *ApproveCollectionAuthority {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(collectionMetadata)
	return inst
}

// GetCollectionMetadataAccount gets the "collectionMetadata" account.
// Collection Metadata account
func (inst *ApproveCollectionAuthority) GetCollectionMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetCollectionMintAccount sets the "collectionMint" account.
// Mint of Collection Metadata
func (inst *ApproveCollectionAuthority) SetCollectionMintAccount(collectionMint ag_solanago.PublicKey) *ApproveCollectionAuthority {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(collectionMint)
	return inst
}

// GetCollectionMintAccount gets the "collectionMint" account.
// Mint of Collection Metadata
func (inst *ApproveCollectionAuthority) GetCollectionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
// Token program
func (inst *ApproveCollectionAuthority) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *ApproveCollectionAuthority {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
// Token program
func (inst *ApproveCollectionAuthority) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemAccount sets the "system" account.
// System program
func (inst *ApproveCollectionAuthority) SetSystemAccount(system ag_solanago.PublicKey) *ApproveCollectionAuthority {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(system)
	return inst
}

// GetSystemAccount gets the "system" account.
// System program
func (inst *ApproveCollectionAuthority) GetSystemAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetRentAccount sets the "rent" account.
// Rent info
func (inst *ApproveCollectionAuthority) SetRentAccount(rent ag_solanago.PublicKey) *ApproveCollectionAuthority {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
// Rent info
func (inst *ApproveCollectionAuthority) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst ApproveCollectionAuthority) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_ApproveCollectionAuthority),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ApproveCollectionAuthority) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ApproveCollectionAuthority) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.CollectionAuthorityRecordPDA is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.CollectionUpdateAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.CollectionAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.CollectionMetadata is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.CollectionMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.System is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *ApproveCollectionAuthority) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ApproveCollectionAuthority")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("collectionAuthorityRecordPDA", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("   collectionUpdateAuthority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                       payer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         collectionAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          collectionMetadata", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("              collectionMint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                tokenProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                      system", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                        rent", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj ApproveCollectionAuthority) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *ApproveCollectionAuthority) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewApproveCollectionAuthorityInstruction declares a new ApproveCollectionAuthority instruction with the provided parameters and accounts.
func NewApproveCollectionAuthorityInstruction(
	// Accounts:
	collectionAuthorityRecordPDA ag_solanago.PublicKey,
	collectionUpdateAuthority ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	collectionAuthority ag_solanago.PublicKey,
	collectionMetadata ag_solanago.PublicKey,
	collectionMint ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	system ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *ApproveCollectionAuthority {
	return NewApproveCollectionAuthorityInstructionBuilder().
		SetCollectionAuthorityRecordPDAAccount(collectionAuthorityRecordPDA).
		SetCollectionUpdateAuthorityAccount(collectionUpdateAuthority).
		SetPayerAccount(payer).
		SetCollectionAuthorityAccount(collectionAuthority).
		SetCollectionMetadataAccount(collectionMetadata).
		SetCollectionMintAccount(collectionMint).
		SetTokenProgramAccount(tokenProgram).
		SetSystemAccount(system).
		SetRentAccount(rent)
}
