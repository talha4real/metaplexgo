// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Utilize or Use an NFT , burns the NFT and returns the lamports to the update authority if the use method is burn and its out of uses.
// Use Authority can be the Holder of the NFT, or a Delegated Use Authority.
type Utilize struct {
	Args *UtilizeArgs

	// [0] = [WRITE] metadata
	// ··········· Metadata account
	//
	// [1] = [WRITE] tokenAccount
	// ··········· Token Account Of NFT
	//
	// [2] = [WRITE] metadataMint
	// ··········· Mint of the Metadata
	//
	// [3] = [SIGNER] useAuthority
	// ··········· A Use Authority / Can be the current Owner of the NFT
	//
	// [4] = [SIGNER] payer
	// ··········· Payer
	//
	// [5] = [] owner
	// ··········· Owner
	//
	// [6] = [] tokenProgram
	// ··········· Token program
	//
	// [7] = [] associatedTokenProgram
	// ··········· Associated Token program
	//
	// [8] = [] system
	// ··········· System program
	//
	// [9] = [] rent
	// ··········· Rent info
	//
	// [10] = [WRITE] useAuthorityRecord
	// ··········· Use Authority Record PDA If present the program Assumes a delegated use authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUtilizeInstructionBuilder creates a new `Utilize` instruction builder.
func NewUtilizeInstructionBuilder() *Utilize {
	nd := &Utilize{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *Utilize) SetArgs(args UtilizeArgs) *Utilize {
	inst.Args = &args
	return inst
}

// SetMetadataAccount sets the "metadata" account.
// Metadata account
func (inst *Utilize) SetMetadataAccount(metadata ag_solanago.PublicKey) *Utilize {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(metadata).WRITE()
	return inst
}

// GetMetadataAccount gets the "metadata" account.
// Metadata account
func (inst *Utilize) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenAccount sets the "tokenAccount" account.
// Token Account Of NFT
func (inst *Utilize) SetTokenAccount(tokenAccount ag_solanago.PublicKey) *Utilize {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenAccount).WRITE()
	return inst
}

// GetTokenAccount gets the "tokenAccount" account.
// Token Account Of NFT
func (inst *Utilize) GetTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMetadataMintAccount sets the "metadataMint" account.
// Mint of the Metadata
func (inst *Utilize) SetMetadataMintAccount(metadataMint ag_solanago.PublicKey) *Utilize {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(metadataMint).WRITE()
	return inst
}

// GetMetadataMintAccount gets the "metadataMint" account.
// Mint of the Metadata
func (inst *Utilize) GetMetadataMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUseAuthorityAccount sets the "useAuthority" account.
// A Use Authority / Can be the current Owner of the NFT
func (inst *Utilize) SetUseAuthorityAccount(useAuthority ag_solanago.PublicKey) *Utilize {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(useAuthority).SIGNER()
	return inst
}

// GetUseAuthorityAccount gets the "useAuthority" account.
// A Use Authority / Can be the current Owner of the NFT
func (inst *Utilize) GetUseAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPayerAccount sets the "payer" account.
// Payer
func (inst *Utilize) SetPayerAccount(payer ag_solanago.PublicKey) *Utilize {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(payer).SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// Payer
func (inst *Utilize) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetOwnerAccount sets the "owner" account.
// Owner
func (inst *Utilize) SetOwnerAccount(owner ag_solanago.PublicKey) *Utilize {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(owner)
	return inst
}

// GetOwnerAccount gets the "owner" account.
// Owner
func (inst *Utilize) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
// Token program
func (inst *Utilize) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Utilize {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
// Token program
func (inst *Utilize) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
// Associated Token program
func (inst *Utilize) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *Utilize {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
// Associated Token program
func (inst *Utilize) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSystemAccount sets the "system" account.
// System program
func (inst *Utilize) SetSystemAccount(system ag_solanago.PublicKey) *Utilize {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(system)
	return inst
}

// GetSystemAccount gets the "system" account.
// System program
func (inst *Utilize) GetSystemAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetRentAccount sets the "rent" account.
// Rent info
func (inst *Utilize) SetRentAccount(rent ag_solanago.PublicKey) *Utilize {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
// Rent info
func (inst *Utilize) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetUseAuthorityRecordAccount sets the "useAuthorityRecord" account.
// Use Authority Record PDA If present the program Assumes a delegated use authority
func (inst *Utilize) SetUseAuthorityRecordAccount(useAuthorityRecord ag_solanago.PublicKey) *Utilize {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(useAuthorityRecord).WRITE()
	return inst
}

// GetUseAuthorityRecordAccount gets the "useAuthorityRecord" account (optional).
// Use Authority Record PDA If present the program Assumes a delegated use authority
func (inst *Utilize) GetUseAuthorityRecordAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst Utilize) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_Utilize),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Utilize) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Utilize) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MetadataMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UseAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.System is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Rent is not set")
		}

		// [10] = UseAuthorityRecord is optional

	}
	return nil
}

func (inst *Utilize) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Utilize")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("              metadata", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                 token", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("          metadataMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          useAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                 payer", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                 owner", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                system", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                  rent", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("    useAuthorityRecord", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj Utilize) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Utilize) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewUtilizeInstruction declares a new Utilize instruction with the provided parameters and accounts.
func NewUtilizeInstruction(
	// Parameters:
	args UtilizeArgs,
	// Accounts:
	metadata ag_solanago.PublicKey,
	tokenAccount ag_solanago.PublicKey,
	metadataMint ag_solanago.PublicKey,
	useAuthority ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	system ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	useAuthorityRecord ag_solanago.PublicKey) *Utilize {
	return NewUtilizeInstructionBuilder().
		SetArgs(args).
		SetMetadataAccount(metadata).
		SetTokenAccount(tokenAccount).
		SetMetadataMintAccount(metadataMint).
		SetUseAuthorityAccount(useAuthority).
		SetPayerAccount(payer).
		SetOwnerAccount(owner).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemAccount(system).
		SetRentAccount(rent).
		SetUseAuthorityRecordAccount(useAuthorityRecord)
}
