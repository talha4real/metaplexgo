// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Revoke account to call [verify_collection] on this NFT
type RevokeCollectionAuthority struct {

	// [0] = [WRITE] useAuthorityRecordPDA
	// ··········· Use Authority Record PDA
	//
	// [1] = [WRITE] ownedToken
	// ··········· Owned Token Account Of Mint
	//
	// [2] = [] metadata
	// ··········· Metadata account
	//
	// [3] = [] metadataMint
	// ··········· Mint of Metadata
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRevokeCollectionAuthorityInstructionBuilder creates a new `RevokeCollectionAuthority` instruction builder.
func NewRevokeCollectionAuthorityInstructionBuilder() *RevokeCollectionAuthority {
	nd := &RevokeCollectionAuthority{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetUseAuthorityRecordPDAAccount sets the "useAuthorityRecordPDA" account.
// Use Authority Record PDA
func (inst *RevokeCollectionAuthority) SetUseAuthorityRecordPDAAccount(useAuthorityRecordPDA ag_solanago.PublicKey) *RevokeCollectionAuthority {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(useAuthorityRecordPDA).WRITE()
	return inst
}

// GetUseAuthorityRecordPDAAccount gets the "useAuthorityRecordPDA" account.
// Use Authority Record PDA
func (inst *RevokeCollectionAuthority) GetUseAuthorityRecordPDAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnedTokenAccount sets the "ownedToken" account.
// Owned Token Account Of Mint
func (inst *RevokeCollectionAuthority) SetOwnedTokenAccount(ownedToken ag_solanago.PublicKey) *RevokeCollectionAuthority {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(ownedToken).WRITE()
	return inst
}

// GetOwnedTokenAccount gets the "ownedToken" account.
// Owned Token Account Of Mint
func (inst *RevokeCollectionAuthority) GetOwnedTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMetadataAccount sets the "metadata" account.
// Metadata account
func (inst *RevokeCollectionAuthority) SetMetadataAccount(metadata ag_solanago.PublicKey) *RevokeCollectionAuthority {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(metadata)
	return inst
}

// GetMetadataAccount gets the "metadata" account.
// Metadata account
func (inst *RevokeCollectionAuthority) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMetadataMintAccount sets the "metadataMint" account.
// Mint of Metadata
func (inst *RevokeCollectionAuthority) SetMetadataMintAccount(metadataMint ag_solanago.PublicKey) *RevokeCollectionAuthority {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(metadataMint)
	return inst
}

// GetMetadataMintAccount gets the "metadataMint" account.
// Mint of Metadata
func (inst *RevokeCollectionAuthority) GetMetadataMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst RevokeCollectionAuthority) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_RevokeCollectionAuthority),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RevokeCollectionAuthority) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RevokeCollectionAuthority) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.UseAuthorityRecordPDA is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OwnedToken is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MetadataMint is not set")
		}
	}
	return nil
}

func (inst *RevokeCollectionAuthority) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RevokeCollectionAuthority")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("useAuthorityRecordPDA", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           ownedToken", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("             metadata", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         metadataMint", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj RevokeCollectionAuthority) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *RevokeCollectionAuthority) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewRevokeCollectionAuthorityInstruction declares a new RevokeCollectionAuthority instruction with the provided parameters and accounts.
func NewRevokeCollectionAuthorityInstruction(
	// Accounts:
	useAuthorityRecordPDA ag_solanago.PublicKey,
	ownedToken ag_solanago.PublicKey,
	metadata ag_solanago.PublicKey,
	metadataMint ag_solanago.PublicKey) *RevokeCollectionAuthority {
	return NewRevokeCollectionAuthorityInstructionBuilder().
		SetUseAuthorityRecordPDAAccount(useAuthorityRecordPDA).
		SetOwnedTokenAccount(ownedToken).
		SetMetadataAccount(metadata).
		SetMetadataMintAccount(metadataMint)
}
