// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type CreateMetadataAccountArgs struct {
	// Note that unique metadatas are disabled for now.
	Data Data

	// Whether you want your metadata to be updateable in the future.
	IsMutable bool
}

func (obj CreateMetadataAccountArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `IsMutable` param:
	err = encoder.Encode(obj.IsMutable)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateMetadataAccountArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `IsMutable`:
	err = decoder.Decode(&obj.IsMutable)
	if err != nil {
		return err
	}
	return nil
}

type CreateMetadataAccountArgsV2 struct {
	// Note that unique metadatas are disabled for now.
	Data DataV2

	// Whether you want your metadata to be updateable in the future.
	IsMutable bool
}

func (obj CreateMetadataAccountArgsV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `IsMutable` param:
	err = encoder.Encode(obj.IsMutable)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateMetadataAccountArgsV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `IsMutable`:
	err = decoder.Decode(&obj.IsMutable)
	if err != nil {
		return err
	}
	return nil
}

type UtilizeArgs struct {
	NumberOfUses uint64
}

func (obj UtilizeArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NumberOfUses` param:
	err = encoder.Encode(obj.NumberOfUses)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UtilizeArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NumberOfUses`:
	err = decoder.Decode(&obj.NumberOfUses)
	if err != nil {
		return err
	}
	return nil
}

type ApproveUseAuthorityArgs struct {
	NumberOfUses uint64
}

func (obj ApproveUseAuthorityArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NumberOfUses` param:
	err = encoder.Encode(obj.NumberOfUses)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ApproveUseAuthorityArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NumberOfUses`:
	err = decoder.Decode(&obj.NumberOfUses)
	if err != nil {
		return err
	}
	return nil
}

type UpdateMetadataAccountArgs struct {
	Data                *Data                  `bin:"optional"`
	UpdateAuthority     *ag_solanago.PublicKey `bin:"optional"`
	PrimarySaleHappened *bool                  `bin:"optional"`
}

func (obj UpdateMetadataAccountArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param (optional):
	{
		if obj.Data == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Data)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `UpdateAuthority` param (optional):
	{
		if obj.UpdateAuthority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.UpdateAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `PrimarySaleHappened` param (optional):
	{
		if obj.PrimarySaleHappened == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.PrimarySaleHappened)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *UpdateMetadataAccountArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Data)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `UpdateAuthority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.UpdateAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `PrimarySaleHappened` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.PrimarySaleHappened)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type UpdateMetadataAccountArgsV2 struct {
	Data                *DataV2                `bin:"optional"`
	UpdateAuthority     *ag_solanago.PublicKey `bin:"optional"`
	PrimarySaleHappened *bool                  `bin:"optional"`
	IsMutable           *bool                  `bin:"optional"`
}

func (obj UpdateMetadataAccountArgsV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param (optional):
	{
		if obj.Data == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Data)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `UpdateAuthority` param (optional):
	{
		if obj.UpdateAuthority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.UpdateAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `PrimarySaleHappened` param (optional):
	{
		if obj.PrimarySaleHappened == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.PrimarySaleHappened)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `IsMutable` param (optional):
	{
		if obj.IsMutable == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.IsMutable)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *UpdateMetadataAccountArgsV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Data)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `UpdateAuthority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.UpdateAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `PrimarySaleHappened` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.PrimarySaleHappened)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `IsMutable` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.IsMutable)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type CreateMasterEditionArgs struct {
	// If set, means that no more than this number of editions can ever be minted. This is immutable.
	MaxSupply *uint64 `bin:"optional"`
}

func (obj CreateMasterEditionArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MaxSupply` param (optional):
	{
		if obj.MaxSupply == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MaxSupply)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *CreateMasterEditionArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MaxSupply` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MaxSupply)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type SetReservationListArgs struct {
	// If set, means that no more than this number of editions can ever be minted. This is immutable.
	Reservations []Reservation

	// should only be present on the very first call to set reservation list.
	TotalReservationSpots *uint64 `bin:"optional"`

	// Where in the reservation list you want to insert this slice of reservations
	Offset uint64

	// What the total spot offset is in the reservation list from the beginning to your slice of reservations.
	// So if is going to be 4 total editions eventually reserved between your slice and the beginning of the array,
	// split between 2 reservation entries, the offset variable above would be "2" since you start at entry 2 in 0 indexed array
	// (first 2 taking 0 and 1) and because they each have 2 spots taken, this variable would be 4.
	TotalSpotOffset uint64
}

func (obj SetReservationListArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Reservations` param:
	err = encoder.Encode(obj.Reservations)
	if err != nil {
		return err
	}
	// Serialize `TotalReservationSpots` param (optional):
	{
		if obj.TotalReservationSpots == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.TotalReservationSpots)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Offset` param:
	err = encoder.Encode(obj.Offset)
	if err != nil {
		return err
	}
	// Serialize `TotalSpotOffset` param:
	err = encoder.Encode(obj.TotalSpotOffset)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SetReservationListArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Reservations`:
	err = decoder.Decode(&obj.Reservations)
	if err != nil {
		return err
	}
	// Deserialize `TotalReservationSpots` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.TotalReservationSpots)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Offset`:
	err = decoder.Decode(&obj.Offset)
	if err != nil {
		return err
	}
	// Deserialize `TotalSpotOffset`:
	err = decoder.Decode(&obj.TotalSpotOffset)
	if err != nil {
		return err
	}
	return nil
}

type MintPrintingTokensViaTokenArgs struct {
	Supply uint64
}

func (obj MintPrintingTokensViaTokenArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Supply` param:
	err = encoder.Encode(obj.Supply)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MintPrintingTokensViaTokenArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Supply`:
	err = decoder.Decode(&obj.Supply)
	if err != nil {
		return err
	}
	return nil
}

type MintNewEditionFromMasterEditionViaTokenArgs struct {
	Edition uint64
}

func (obj MintNewEditionFromMasterEditionViaTokenArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Edition` param:
	err = encoder.Encode(obj.Edition)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MintNewEditionFromMasterEditionViaTokenArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Edition`:
	err = decoder.Decode(&obj.Edition)
	if err != nil {
		return err
	}
	return nil
}
