// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Proxy Call to Mint Edition using a Store Token Account as a Vault Authority.
type MintNewEditionFromMasterEditionViaVaultProxy struct {
	Args *MintNewEditionFromMasterEditionViaTokenArgs

	// [0] = [WRITE] newMetadataKey
	// ··········· New Metadata key (pda of ['metadata', program id, mint id])
	//
	// [1] = [WRITE] newEditionPDA
	// ··········· New Edition (pda of ['metadata', program id, mint id, 'edition'])
	//
	// [2] = [WRITE] masterRecordEditionV2
	// ··········· Master Record Edition V2 (pda of ['metadata', program id, master metadata mint id, 'edition']
	//
	// [3] = [WRITE] mintOfNewToken
	// ··········· Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY
	//
	// [4] = [WRITE] editionPDA
	// ··········· Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number])
	// ··········· where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE).
	//
	// [5] = [SIGNER] mintAuthority
	// ··········· Mint authority of new mint
	//
	// [6] = [SIGNER] payer
	// ··········· payer
	//
	// [7] = [SIGNER] vaultAuthority
	// ··········· Vault authority
	//
	// [8] = [] safetyDepositTokenStore
	// ··········· Safety deposit token store account
	//
	// [9] = [] safetyDepositBox
	// ··········· Safety deposit box
	//
	// [10] = [] vault
	// ··········· Vault
	//
	// [11] = [] updateAuthorityInfo
	// ··········· Update authority info for new metadata
	//
	// [12] = [] masterRecordMetadata
	// ··········· Master record metadata account
	//
	// [13] = [] tokenProgram
	// ··········· Token program
	//
	// [14] = [] tokenVaultProgram
	// ··········· Token vault program
	//
	// [15] = [] system
	// ··········· System program
	//
	// [16] = [] rent
	// ··········· Rent info
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMintNewEditionFromMasterEditionViaVaultProxyInstructionBuilder creates a new `MintNewEditionFromMasterEditionViaVaultProxy` instruction builder.
func NewMintNewEditionFromMasterEditionViaVaultProxyInstructionBuilder() *MintNewEditionFromMasterEditionViaVaultProxy {
	nd := &MintNewEditionFromMasterEditionViaVaultProxy{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 17),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) SetArgs(args MintNewEditionFromMasterEditionViaTokenArgs) *MintNewEditionFromMasterEditionViaVaultProxy {
	inst.Args = &args
	return inst
}

// SetNewMetadataKeyAccount sets the "newMetadataKey" account.
// New Metadata key (pda of ['metadata', program id, mint id])
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) SetNewMetadataKeyAccount(newMetadataKey ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaVaultProxy {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(newMetadataKey).WRITE()
	return inst
}

// GetNewMetadataKeyAccount gets the "newMetadataKey" account.
// New Metadata key (pda of ['metadata', program id, mint id])
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) GetNewMetadataKeyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetNewEditionPDAAccount sets the "newEditionPDA" account.
// New Edition (pda of ['metadata', program id, mint id, 'edition'])
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) SetNewEditionPDAAccount(newEditionPDA ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaVaultProxy {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(newEditionPDA).WRITE()
	return inst
}

// GetNewEditionPDAAccount gets the "newEditionPDA" account.
// New Edition (pda of ['metadata', program id, mint id, 'edition'])
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) GetNewEditionPDAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMasterRecordEditionV2Account sets the "masterRecordEditionV2" account.
// Master Record Edition V2 (pda of ['metadata', program id, master metadata mint id, 'edition']
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) SetMasterRecordEditionV2Account(masterRecordEditionV2 ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaVaultProxy {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(masterRecordEditionV2).WRITE()
	return inst
}

// GetMasterRecordEditionV2Account gets the "masterRecordEditionV2" account.
// Master Record Edition V2 (pda of ['metadata', program id, master metadata mint id, 'edition']
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) GetMasterRecordEditionV2Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintOfNewTokenAccount sets the "mintOfNewToken" account.
// Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) SetMintOfNewTokenAccount(mintOfNewToken ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaVaultProxy {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mintOfNewToken).WRITE()
	return inst
}

// GetMintOfNewTokenAccount gets the "mintOfNewToken" account.
// Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) GetMintOfNewTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetEditionPDAAccount sets the "editionPDA" account.
// Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number])
// where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE).
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) SetEditionPDAAccount(editionPDA ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaVaultProxy {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(editionPDA).WRITE()
	return inst
}

// GetEditionPDAAccount gets the "editionPDA" account.
// Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number])
// where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE).
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) GetEditionPDAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMintAuthorityAccount sets the "mintAuthority" account.
// Mint authority of new mint
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) SetMintAuthorityAccount(mintAuthority ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaVaultProxy {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(mintAuthority).SIGNER()
	return inst
}

// GetMintAuthorityAccount gets the "mintAuthority" account.
// Mint authority of new mint
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) GetMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPayerAccount sets the "payer" account.
// payer
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) SetPayerAccount(payer ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaVaultProxy {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(payer).SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// payer
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetVaultAuthorityAccount sets the "vaultAuthority" account.
// Vault authority
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) SetVaultAuthorityAccount(vaultAuthority ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaVaultProxy {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(vaultAuthority).SIGNER()
	return inst
}

// GetVaultAuthorityAccount gets the "vaultAuthority" account.
// Vault authority
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) GetVaultAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSafetyDepositTokenStoreAccount sets the "safetyDepositTokenStore" account.
// Safety deposit token store account
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) SetSafetyDepositTokenStoreAccount(safetyDepositTokenStore ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaVaultProxy {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(safetyDepositTokenStore)
	return inst
}

// GetSafetyDepositTokenStoreAccount gets the "safetyDepositTokenStore" account.
// Safety deposit token store account
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) GetSafetyDepositTokenStoreAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSafetyDepositBoxAccount sets the "safetyDepositBox" account.
// Safety deposit box
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) SetSafetyDepositBoxAccount(safetyDepositBox ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaVaultProxy {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(safetyDepositBox)
	return inst
}

// GetSafetyDepositBoxAccount gets the "safetyDepositBox" account.
// Safety deposit box
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) GetSafetyDepositBoxAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetVaultAccount sets the "vault" account.
// Vault
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) SetVaultAccount(vault ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaVaultProxy {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(vault)
	return inst
}

// GetVaultAccount gets the "vault" account.
// Vault
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetUpdateAuthorityInfoAccount sets the "updateAuthorityInfo" account.
// Update authority info for new metadata
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) SetUpdateAuthorityInfoAccount(updateAuthorityInfo ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaVaultProxy {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(updateAuthorityInfo)
	return inst
}

// GetUpdateAuthorityInfoAccount gets the "updateAuthorityInfo" account.
// Update authority info for new metadata
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) GetUpdateAuthorityInfoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetMasterRecordMetadataAccount sets the "masterRecordMetadata" account.
// Master record metadata account
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) SetMasterRecordMetadataAccount(masterRecordMetadata ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaVaultProxy {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(masterRecordMetadata)
	return inst
}

// GetMasterRecordMetadataAccount gets the "masterRecordMetadata" account.
// Master record metadata account
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) GetMasterRecordMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
// Token program
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaVaultProxy {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
// Token program
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetTokenVaultProgramAccount sets the "tokenVaultProgram" account.
// Token vault program
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) SetTokenVaultProgramAccount(tokenVaultProgram ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaVaultProxy {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(tokenVaultProgram)
	return inst
}

// GetTokenVaultProgramAccount gets the "tokenVaultProgram" account.
// Token vault program
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) GetTokenVaultProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetSystemAccount sets the "system" account.
// System program
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) SetSystemAccount(system ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaVaultProxy {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(system)
	return inst
}

// GetSystemAccount gets the "system" account.
// System program
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) GetSystemAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetRentAccount sets the "rent" account.
// Rent info
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) SetRentAccount(rent ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaVaultProxy {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
// Rent info
func (inst *MintNewEditionFromMasterEditionViaVaultProxy) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

func (inst MintNewEditionFromMasterEditionViaVaultProxy) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_MintNewEditionFromMasterEditionViaVaultProxy),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MintNewEditionFromMasterEditionViaVaultProxy) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MintNewEditionFromMasterEditionViaVaultProxy) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.NewMetadataKey is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.NewEditionPDA is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MasterRecordEditionV2 is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MintOfNewToken is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.EditionPDA is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.MintAuthority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.VaultAuthority is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SafetyDepositTokenStore is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SafetyDepositBox is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.UpdateAuthorityInfo is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.MasterRecordMetadata is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.TokenVaultProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.System is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *MintNewEditionFromMasterEditionViaVaultProxy) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MintNewEditionFromMasterEditionViaVaultProxy")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=17]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         newMetadataKey", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          newEditionPDA", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  masterRecordEditionV2", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         mintOfNewToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("             editionPDA", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("          mintAuthority", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                  payer", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("         vaultAuthority", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("safetyDepositTokenStore", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("       safetyDepositBox", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                  vault", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("    updateAuthorityInfo", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("   masterRecordMetadata", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("           tokenProgram", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("      tokenVaultProgram", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("                 system", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("                   rent", inst.AccountMetaSlice.Get(16)))
					})
				})
		})
}

func (obj MintNewEditionFromMasterEditionViaVaultProxy) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MintNewEditionFromMasterEditionViaVaultProxy) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewMintNewEditionFromMasterEditionViaVaultProxyInstruction declares a new MintNewEditionFromMasterEditionViaVaultProxy instruction with the provided parameters and accounts.
func NewMintNewEditionFromMasterEditionViaVaultProxyInstruction(
	// Parameters:
	args MintNewEditionFromMasterEditionViaTokenArgs,
	// Accounts:
	newMetadataKey ag_solanago.PublicKey,
	newEditionPDA ag_solanago.PublicKey,
	masterRecordEditionV2 ag_solanago.PublicKey,
	mintOfNewToken ag_solanago.PublicKey,
	editionPDA ag_solanago.PublicKey,
	mintAuthority ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	vaultAuthority ag_solanago.PublicKey,
	safetyDepositTokenStore ag_solanago.PublicKey,
	safetyDepositBox ag_solanago.PublicKey,
	vault ag_solanago.PublicKey,
	updateAuthorityInfo ag_solanago.PublicKey,
	masterRecordMetadata ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	tokenVaultProgram ag_solanago.PublicKey,
	system ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaVaultProxy {
	return NewMintNewEditionFromMasterEditionViaVaultProxyInstructionBuilder().
		SetArgs(args).
		SetNewMetadataKeyAccount(newMetadataKey).
		SetNewEditionPDAAccount(newEditionPDA).
		SetMasterRecordEditionV2Account(masterRecordEditionV2).
		SetMintOfNewTokenAccount(mintOfNewToken).
		SetEditionPDAAccount(editionPDA).
		SetMintAuthorityAccount(mintAuthority).
		SetPayerAccount(payer).
		SetVaultAuthorityAccount(vaultAuthority).
		SetSafetyDepositTokenStoreAccount(safetyDepositTokenStore).
		SetSafetyDepositBoxAccount(safetyDepositBox).
		SetVaultAccount(vault).
		SetUpdateAuthorityInfoAccount(updateAuthorityInfo).
		SetMasterRecordMetadataAccount(masterRecordMetadata).
		SetTokenProgramAccount(tokenProgram).
		SetTokenVaultProgramAccount(tokenVaultProgram).
		SetSystemAccount(system).
		SetRentAccount(rent)
}
