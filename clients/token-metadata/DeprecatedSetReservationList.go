// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Reserve up to 200 editions in sequence for up to 200 addresses in an existing reservation PDA, which can then be used later by
// redeemers who have printing tokens as a reservation to get a specific edition number
// as opposed to whatever one is currently listed on the master edition. Used by Auction Manager
// to guarantee printing order on bid redemption. AM will call whenever the first person redeems a
// printing bid to reserve the whole block
// of winners in order and then each winner when they get their token submits their mint and account
// with the pda that was created by that first bidder - the token metadata can then cross reference
// these people with the list and see that bidder A gets edition #2, so on and so forth.
//
// NOTE: If you have more than 20 addresses in a reservation list, this may be called multiple times to build up the list,
// otherwise, it simply wont fit in one transaction. Only provide a total_reservation argument on the first call, which will
// allocate the edition space, and in follow up calls this will specifically be unnecessary (and indeed will error.)
type DeprecatedSetReservationList struct {
	Args *SetReservationListArgs

	// [0] = [WRITE] masterEditionV1
	// ··········· Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])
	//
	// [1] = [WRITE] pdaForReservationlist
	// ··········· PDA for ReservationList of ['metadata', program id, master edition key, 'reservation', resource-key]
	//
	// [2] = [SIGNER] resource
	// ··········· The resource you tied the reservation list too
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDeprecatedSetReservationListInstructionBuilder creates a new `DeprecatedSetReservationList` instruction builder.
func NewDeprecatedSetReservationListInstructionBuilder() *DeprecatedSetReservationList {
	nd := &DeprecatedSetReservationList{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *DeprecatedSetReservationList) SetArgs(args SetReservationListArgs) *DeprecatedSetReservationList {
	inst.Args = &args
	return inst
}

// SetMasterEditionV1Account sets the "masterEditionV1" account.
// Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])
func (inst *DeprecatedSetReservationList) SetMasterEditionV1Account(masterEditionV1 ag_solanago.PublicKey) *DeprecatedSetReservationList {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(masterEditionV1).WRITE()
	return inst
}

// GetMasterEditionV1Account gets the "masterEditionV1" account.
// Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])
func (inst *DeprecatedSetReservationList) GetMasterEditionV1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPdaForReservationlistAccount sets the "pdaForReservationlist" account.
// PDA for ReservationList of ['metadata', program id, master edition key, 'reservation', resource-key]
func (inst *DeprecatedSetReservationList) SetPdaForReservationlistAccount(pdaForReservationlist ag_solanago.PublicKey) *DeprecatedSetReservationList {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pdaForReservationlist).WRITE()
	return inst
}

// GetPdaForReservationlistAccount gets the "pdaForReservationlist" account.
// PDA for ReservationList of ['metadata', program id, master edition key, 'reservation', resource-key]
func (inst *DeprecatedSetReservationList) GetPdaForReservationlistAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetResourceAccount sets the "resource" account.
// The resource you tied the reservation list too
func (inst *DeprecatedSetReservationList) SetResourceAccount(resource ag_solanago.PublicKey) *DeprecatedSetReservationList {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(resource).SIGNER()
	return inst
}

// GetResourceAccount gets the "resource" account.
// The resource you tied the reservation list too
func (inst *DeprecatedSetReservationList) GetResourceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst DeprecatedSetReservationList) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_DeprecatedSetReservationList),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DeprecatedSetReservationList) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DeprecatedSetReservationList) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.MasterEditionV1 is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PdaForReservationlist is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Resource is not set")
		}
	}
	return nil
}

func (inst *DeprecatedSetReservationList) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DeprecatedSetReservationList")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      masterEditionV1", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("pdaForReservationlist", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("             resource", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj DeprecatedSetReservationList) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *DeprecatedSetReservationList) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewDeprecatedSetReservationListInstruction declares a new DeprecatedSetReservationList instruction with the provided parameters and accounts.
func NewDeprecatedSetReservationListInstruction(
	// Parameters:
	args SetReservationListArgs,
	// Accounts:
	masterEditionV1 ag_solanago.PublicKey,
	pdaForReservationlist ag_solanago.PublicKey,
	resource ag_solanago.PublicKey) *DeprecatedSetReservationList {
	return NewDeprecatedSetReservationListInstructionBuilder().
		SetArgs(args).
		SetMasterEditionV1Account(masterEditionV1).
		SetPdaForReservationlistAccount(pdaForReservationlist).
		SetResourceAccount(resource)
}
