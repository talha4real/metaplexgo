// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_vault

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Self explanatory - mint more fractional shares if the vault is configured to allow such.
type MintFractionalShares struct {
	Args *NumberOfShareArgs

	// [0] = [WRITE] fractionTreasury
	// ··········· Fraction treasury
	//
	// [1] = [WRITE] fractionMint
	// ··········· Fraction mint
	//
	// [2] = [] initializedActiveTokenVault
	// ··········· The initialized active token vault
	//
	// [3] = [] pdaBasedMintAuthority
	// ··········· PDA-based Mint authority to mint tokens to treasury[PREFIX, program_id]
	//
	// [4] = [SIGNER] vaultAuthority
	// ··········· Authority of vault
	//
	// [5] = [] tokenProgram
	// ··········· Token program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMintFractionalSharesInstructionBuilder creates a new `MintFractionalShares` instruction builder.
func NewMintFractionalSharesInstructionBuilder() *MintFractionalShares {
	nd := &MintFractionalShares{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *MintFractionalShares) SetArgs(args NumberOfShareArgs) *MintFractionalShares {
	inst.Args = &args
	return inst
}

// SetFractionTreasuryAccount sets the "fractionTreasury" account.
// Fraction treasury
func (inst *MintFractionalShares) SetFractionTreasuryAccount(fractionTreasury ag_solanago.PublicKey) *MintFractionalShares {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(fractionTreasury).WRITE()
	return inst
}

// GetFractionTreasuryAccount gets the "fractionTreasury" account.
// Fraction treasury
func (inst *MintFractionalShares) GetFractionTreasuryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetFractionMintAccount sets the "fractionMint" account.
// Fraction mint
func (inst *MintFractionalShares) SetFractionMintAccount(fractionMint ag_solanago.PublicKey) *MintFractionalShares {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(fractionMint).WRITE()
	return inst
}

// GetFractionMintAccount gets the "fractionMint" account.
// Fraction mint
func (inst *MintFractionalShares) GetFractionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetInitializedActiveTokenVaultAccount sets the "initializedActiveTokenVault" account.
// The initialized active token vault
func (inst *MintFractionalShares) SetInitializedActiveTokenVaultAccount(initializedActiveTokenVault ag_solanago.PublicKey) *MintFractionalShares {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(initializedActiveTokenVault)
	return inst
}

// GetInitializedActiveTokenVaultAccount gets the "initializedActiveTokenVault" account.
// The initialized active token vault
func (inst *MintFractionalShares) GetInitializedActiveTokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPdaBasedMintAuthorityAccount sets the "pdaBasedMintAuthority" account.
// PDA-based Mint authority to mint tokens to treasury[PREFIX, program_id]
func (inst *MintFractionalShares) SetPdaBasedMintAuthorityAccount(pdaBasedMintAuthority ag_solanago.PublicKey) *MintFractionalShares {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(pdaBasedMintAuthority)
	return inst
}

// GetPdaBasedMintAuthorityAccount gets the "pdaBasedMintAuthority" account.
// PDA-based Mint authority to mint tokens to treasury[PREFIX, program_id]
func (inst *MintFractionalShares) GetPdaBasedMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetVaultAuthorityAccount sets the "vaultAuthority" account.
// Authority of vault
func (inst *MintFractionalShares) SetVaultAuthorityAccount(vaultAuthority ag_solanago.PublicKey) *MintFractionalShares {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(vaultAuthority).SIGNER()
	return inst
}

// GetVaultAuthorityAccount gets the "vaultAuthority" account.
// Authority of vault
func (inst *MintFractionalShares) GetVaultAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
// Token program
func (inst *MintFractionalShares) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MintFractionalShares {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
// Token program
func (inst *MintFractionalShares) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst MintFractionalShares) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_MintFractionalShares),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MintFractionalShares) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MintFractionalShares) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.FractionTreasury is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.FractionMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.InitializedActiveTokenVault is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PdaBasedMintAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.VaultAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *MintFractionalShares) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MintFractionalShares")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           fractionTreasury", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("               fractionMint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("initializedActiveTokenVault", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      pdaBasedMintAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("             vaultAuthority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("               tokenProgram", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj MintFractionalShares) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MintFractionalShares) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewMintFractionalSharesInstruction declares a new MintFractionalShares instruction with the provided parameters and accounts.
func NewMintFractionalSharesInstruction(
	// Parameters:
	args NumberOfShareArgs,
	// Accounts:
	fractionTreasury ag_solanago.PublicKey,
	fractionMint ag_solanago.PublicKey,
	initializedActiveTokenVault ag_solanago.PublicKey,
	pdaBasedMintAuthority ag_solanago.PublicKey,
	vaultAuthority ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *MintFractionalShares {
	return NewMintFractionalSharesInstructionBuilder().
		SetArgs(args).
		SetFractionTreasuryAccount(fractionTreasury).
		SetFractionMintAccount(fractionMint).
		SetInitializedActiveTokenVaultAccount(initializedActiveTokenVault).
		SetPdaBasedMintAuthorityAccount(pdaBasedMintAuthority).
		SetVaultAuthorityAccount(vaultAuthority).
		SetTokenProgramAccount(tokenProgram)
}
