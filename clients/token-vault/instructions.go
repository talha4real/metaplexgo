// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_vault

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("vau1zxA2LbssAUEF7Gpw91zMM1LvXrvpzJtmZ58rPsn")

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "TokenVault"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

const (
	// Initialize a token vault, starts inactivate. Add tokens in subsequent instructions, then activate.
	Instruction_InitVault uint8 = iota

	// Add a token to a inactive token vault
	Instruction_AddTokenToInactiveVault

	// Activates the vault, distributing initial shares into the fraction treasury.
	// Tokens can no longer be removed in this state until Combination.
	Instruction_ActivateVault

	// This act checks the external pricing oracle for permission to combine and the price of the circulating market cap to do so.
	// If you can afford it, this amount is charged and placed into the redeem treasury for shareholders to redeem at a later time.
	// The treasury then unlocks into Combine state and you can remove the tokens.
	Instruction_CombineVault

	// If in the combine state, shareholders can hit this endpoint to burn shares in exchange for monies from the treasury.
	// Once fractional supply is zero and all tokens have been removed this action will take vault to Deactivated
	Instruction_RedeemShares

	// If in combine state, authority on vault can hit this to withdrawal some of a token type from a safety deposit box.
	// Once fractional supply is zero and all tokens have been removed this action will take vault to Deactivated
	Instruction_WithdrawTokenFromSafetyDepositBox

	// Self explanatory - mint more fractional shares if the vault is configured to allow such.
	Instruction_MintFractionalShares

	// Withdraws shares from the treasury to a desired account.
	Instruction_WithdrawSharesFromTreasury

	// Returns shares to the vault if you wish to remove them from circulation.
	Instruction_AddSharesToTreasury

	// Helpful method that isn't necessary to use for main users of the app, but allows one to create/update
	// existing external price account fields if they are signers of this account.
	// Useful for testing purposes, and the CLI makes use of it as well so that you can verify logic.
	Instruction_UpdateExternalPriceAccount

	// Sets the authority of the vault to a new authority.
	Instruction_SetAuthority
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id uint8) string {
	switch id {
	case Instruction_InitVault:
		return "InitVault"
	case Instruction_AddTokenToInactiveVault:
		return "AddTokenToInactiveVault"
	case Instruction_ActivateVault:
		return "ActivateVault"
	case Instruction_CombineVault:
		return "CombineVault"
	case Instruction_RedeemShares:
		return "RedeemShares"
	case Instruction_WithdrawTokenFromSafetyDepositBox:
		return "WithdrawTokenFromSafetyDepositBox"
	case Instruction_MintFractionalShares:
		return "MintFractionalShares"
	case Instruction_WithdrawSharesFromTreasury:
		return "WithdrawSharesFromTreasury"
	case Instruction_AddSharesToTreasury:
		return "AddSharesToTreasury"
	case Instruction_UpdateExternalPriceAccount:
		return "UpdateExternalPriceAccount"
	case Instruction_SetAuthority:
		return "SetAuthority"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.Uint8TypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"InitVault", (*InitVault)(nil),
		},
		{
			"AddTokenToInactiveVault", (*AddTokenToInactiveVault)(nil),
		},
		{
			"ActivateVault", (*ActivateVault)(nil),
		},
		{
			"CombineVault", (*CombineVault)(nil),
		},
		{
			"RedeemShares", (*RedeemShares)(nil),
		},
		{
			"WithdrawTokenFromSafetyDepositBox", (*WithdrawTokenFromSafetyDepositBox)(nil),
		},
		{
			"MintFractionalShares", (*MintFractionalShares)(nil),
		},
		{
			"WithdrawSharesFromTreasury", (*WithdrawSharesFromTreasury)(nil),
		},
		{
			"AddSharesToTreasury", (*AddSharesToTreasury)(nil),
		},
		{
			"UpdateExternalPriceAccount", (*UpdateExternalPriceAccount)(nil),
		},
		{
			"SetAuthority", (*SetAuthority)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteUint8(inst.TypeID.Uint8())
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
