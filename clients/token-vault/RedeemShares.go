// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_vault

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// If in the combine state, shareholders can hit this endpoint to burn shares in exchange for monies from the treasury.
// Once fractional supply is zero and all tokens have been removed this action will take vault to Deactivated
type RedeemShares struct {

	// [0] = [WRITE] initializedToken
	// ··········· Initialized Token account containing your fractional shares
	//
	// [1] = [WRITE] initializedDestinationToken
	// ··········· Initialized Destination token account where you wish your proceeds to arrive
	//
	// [2] = [WRITE] fractionMint
	// ··········· Fraction mint
	//
	// [3] = [WRITE] redeemTreasury
	// ··········· Redeem treasury account
	//
	// [4] = [] pdaBasedTransferAuthority
	// ··········· PDA-based Transfer authority for the transfer of proceeds from redeem treasury to destination seed [PREFIX, program_id]
	//
	// [5] = [SIGNER] burnAuthority
	// ··········· Burn authority for the burning of your shares
	//
	// [6] = [] combinedTokenVault
	// ··········· Combined token vault
	//
	// [7] = [] tokenProgram
	// ··········· Token program
	//
	// [8] = [] rentSysvar
	// ··········· Rent sysvar
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRedeemSharesInstructionBuilder creates a new `RedeemShares` instruction builder.
func NewRedeemSharesInstructionBuilder() *RedeemShares {
	nd := &RedeemShares{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetInitializedTokenAccount sets the "initializedToken" account.
// Initialized Token account containing your fractional shares
func (inst *RedeemShares) SetInitializedTokenAccount(initializedToken ag_solanago.PublicKey) *RedeemShares {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(initializedToken).WRITE()
	return inst
}

// GetInitializedTokenAccount gets the "initializedToken" account.
// Initialized Token account containing your fractional shares
func (inst *RedeemShares) GetInitializedTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetInitializedDestinationTokenAccount sets the "initializedDestinationToken" account.
// Initialized Destination token account where you wish your proceeds to arrive
func (inst *RedeemShares) SetInitializedDestinationTokenAccount(initializedDestinationToken ag_solanago.PublicKey) *RedeemShares {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(initializedDestinationToken).WRITE()
	return inst
}

// GetInitializedDestinationTokenAccount gets the "initializedDestinationToken" account.
// Initialized Destination token account where you wish your proceeds to arrive
func (inst *RedeemShares) GetInitializedDestinationTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetFractionMintAccount sets the "fractionMint" account.
// Fraction mint
func (inst *RedeemShares) SetFractionMintAccount(fractionMint ag_solanago.PublicKey) *RedeemShares {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(fractionMint).WRITE()
	return inst
}

// GetFractionMintAccount gets the "fractionMint" account.
// Fraction mint
func (inst *RedeemShares) GetFractionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetRedeemTreasuryAccount sets the "redeemTreasury" account.
// Redeem treasury account
func (inst *RedeemShares) SetRedeemTreasuryAccount(redeemTreasury ag_solanago.PublicKey) *RedeemShares {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(redeemTreasury).WRITE()
	return inst
}

// GetRedeemTreasuryAccount gets the "redeemTreasury" account.
// Redeem treasury account
func (inst *RedeemShares) GetRedeemTreasuryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPdaBasedTransferAuthorityAccount sets the "pdaBasedTransferAuthority" account.
// PDA-based Transfer authority for the transfer of proceeds from redeem treasury to destination seed [PREFIX, program_id]
func (inst *RedeemShares) SetPdaBasedTransferAuthorityAccount(pdaBasedTransferAuthority ag_solanago.PublicKey) *RedeemShares {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(pdaBasedTransferAuthority)
	return inst
}

// GetPdaBasedTransferAuthorityAccount gets the "pdaBasedTransferAuthority" account.
// PDA-based Transfer authority for the transfer of proceeds from redeem treasury to destination seed [PREFIX, program_id]
func (inst *RedeemShares) GetPdaBasedTransferAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetBurnAuthorityAccount sets the "burnAuthority" account.
// Burn authority for the burning of your shares
func (inst *RedeemShares) SetBurnAuthorityAccount(burnAuthority ag_solanago.PublicKey) *RedeemShares {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(burnAuthority).SIGNER()
	return inst
}

// GetBurnAuthorityAccount gets the "burnAuthority" account.
// Burn authority for the burning of your shares
func (inst *RedeemShares) GetBurnAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetCombinedTokenVaultAccount sets the "combinedTokenVault" account.
// Combined token vault
func (inst *RedeemShares) SetCombinedTokenVaultAccount(combinedTokenVault ag_solanago.PublicKey) *RedeemShares {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(combinedTokenVault)
	return inst
}

// GetCombinedTokenVaultAccount gets the "combinedTokenVault" account.
// Combined token vault
func (inst *RedeemShares) GetCombinedTokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
// Token program
func (inst *RedeemShares) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *RedeemShares {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
// Token program
func (inst *RedeemShares) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetRentSysvarAccount sets the "rentSysvar" account.
// Rent sysvar
func (inst *RedeemShares) SetRentSysvarAccount(rentSysvar ag_solanago.PublicKey) *RedeemShares {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(rentSysvar)
	return inst
}

// GetRentSysvarAccount gets the "rentSysvar" account.
// Rent sysvar
func (inst *RedeemShares) GetRentSysvarAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst RedeemShares) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_RedeemShares),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RedeemShares) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RedeemShares) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.InitializedToken is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.InitializedDestinationToken is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.FractionMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.RedeemTreasury is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PdaBasedTransferAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.BurnAuthority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.CombinedTokenVault is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.RentSysvar is not set")
		}
	}
	return nil
}

func (inst *RedeemShares) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RedeemShares")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           initializedToken", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("initializedDestinationToken", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("               fractionMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("             redeemTreasury", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  pdaBasedTransferAuthority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("              burnAuthority", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         combinedTokenVault", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("               tokenProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                 rentSysvar", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj RedeemShares) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *RedeemShares) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewRedeemSharesInstruction declares a new RedeemShares instruction with the provided parameters and accounts.
func NewRedeemSharesInstruction(
	// Accounts:
	initializedToken ag_solanago.PublicKey,
	initializedDestinationToken ag_solanago.PublicKey,
	fractionMint ag_solanago.PublicKey,
	redeemTreasury ag_solanago.PublicKey,
	pdaBasedTransferAuthority ag_solanago.PublicKey,
	burnAuthority ag_solanago.PublicKey,
	combinedTokenVault ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	rentSysvar ag_solanago.PublicKey) *RedeemShares {
	return NewRedeemSharesInstructionBuilder().
		SetInitializedTokenAccount(initializedToken).
		SetInitializedDestinationTokenAccount(initializedDestinationToken).
		SetFractionMintAccount(fractionMint).
		SetRedeemTreasuryAccount(redeemTreasury).
		SetPdaBasedTransferAuthorityAccount(pdaBasedTransferAuthority).
		SetBurnAuthorityAccount(burnAuthority).
		SetCombinedTokenVaultAccount(combinedTokenVault).
		SetTokenProgramAccount(tokenProgram).
		SetRentSysvarAccount(rentSysvar)
}
