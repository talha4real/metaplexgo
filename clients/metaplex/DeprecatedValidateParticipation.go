// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package metaplex

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// NOTE: Requires an AuctionManagerV1.
// Validates an participation nft (if present) on the Auction Manager. Because of the differing mechanics of an open
// edition (required for participation nft), it needs to be validated at a different endpoint than a normal safety deposit box.
type DeprecatedValidateParticipation struct {

	// [0] = [WRITE] auctionManager
	// ··········· Auction manager
	//
	// [1] = [] openEditionMetadata
	// ··········· Open edition metadata
	//
	// [2] = [] openEditionMasterEdition
	// ··········· Open edition MasterEdition account
	//
	// [3] = [] printingAuthorizationTokenHoldingAccount
	// ··········· Printing authorization token holding account - must be of the printing_mint type on the master_edition, used by
	// ··········· the auction manager to hold printing authorization tokens for all eligible winners of the participation nft when auction ends. Must
	// ··········· be owned by auction manager account.
	//
	// [4] = [SIGNER] auctionManagerAuthority
	// ··········· Authority for the Auction Manager
	//
	// [5] = [] whitelistedCreatorEntry
	// ··········· A whitelisted creator entry for this store for the open edition
	// ··········· pda of ['metaplex', store key, creator key] where creator key comes from creator list of metadata
	//
	// [6] = [] auctionManagerStore
	// ··········· The auction manager's store
	//
	// [7] = [] safetyDepositBox
	// ··········· Safety deposit box
	//
	// [8] = [] safetyDepositTokenStorage
	// ··········· Safety deposit token store
	//
	// [9] = [] vault
	// ··········· Vault
	//
	// [10] = [] rentSysvar
	// ··········· Rent sysvar
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDeprecatedValidateParticipationInstructionBuilder creates a new `DeprecatedValidateParticipation` instruction builder.
func NewDeprecatedValidateParticipationInstructionBuilder() *DeprecatedValidateParticipation {
	nd := &DeprecatedValidateParticipation{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	return nd
}

// SetAuctionManagerAccount sets the "auctionManager" account.
// Auction manager
func (inst *DeprecatedValidateParticipation) SetAuctionManagerAccount(auctionManager ag_solanago.PublicKey) *DeprecatedValidateParticipation {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(auctionManager).WRITE()
	return inst
}

// GetAuctionManagerAccount gets the "auctionManager" account.
// Auction manager
func (inst *DeprecatedValidateParticipation) GetAuctionManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOpenEditionMetadataAccount sets the "openEditionMetadata" account.
// Open edition metadata
func (inst *DeprecatedValidateParticipation) SetOpenEditionMetadataAccount(openEditionMetadata ag_solanago.PublicKey) *DeprecatedValidateParticipation {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(openEditionMetadata)
	return inst
}

// GetOpenEditionMetadataAccount gets the "openEditionMetadata" account.
// Open edition metadata
func (inst *DeprecatedValidateParticipation) GetOpenEditionMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOpenEditionMasterEditionAccount sets the "openEditionMasterEdition" account.
// Open edition MasterEdition account
func (inst *DeprecatedValidateParticipation) SetOpenEditionMasterEditionAccount(openEditionMasterEdition ag_solanago.PublicKey) *DeprecatedValidateParticipation {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(openEditionMasterEdition)
	return inst
}

// GetOpenEditionMasterEditionAccount gets the "openEditionMasterEdition" account.
// Open edition MasterEdition account
func (inst *DeprecatedValidateParticipation) GetOpenEditionMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPrintingAuthorizationTokenHoldingAccount sets the "printingAuthorizationTokenHoldingAccount" account.
// Printing authorization token holding account - must be of the printing_mint type on the master_edition, used by
// the auction manager to hold printing authorization tokens for all eligible winners of the participation nft when auction ends. Must
// be owned by auction manager account.
func (inst *DeprecatedValidateParticipation) SetPrintingAuthorizationTokenHoldingAccount(printingAuthorizationTokenHoldingAccount ag_solanago.PublicKey) *DeprecatedValidateParticipation {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(printingAuthorizationTokenHoldingAccount)
	return inst
}

// GetPrintingAuthorizationTokenHoldingAccount gets the "printingAuthorizationTokenHoldingAccount" account.
// Printing authorization token holding account - must be of the printing_mint type on the master_edition, used by
// the auction manager to hold printing authorization tokens for all eligible winners of the participation nft when auction ends. Must
// be owned by auction manager account.
func (inst *DeprecatedValidateParticipation) GetPrintingAuthorizationTokenHoldingAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAuctionManagerAuthorityAccount sets the "auctionManagerAuthority" account.
// Authority for the Auction Manager
func (inst *DeprecatedValidateParticipation) SetAuctionManagerAuthorityAccount(auctionManagerAuthority ag_solanago.PublicKey) *DeprecatedValidateParticipation {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(auctionManagerAuthority).SIGNER()
	return inst
}

// GetAuctionManagerAuthorityAccount gets the "auctionManagerAuthority" account.
// Authority for the Auction Manager
func (inst *DeprecatedValidateParticipation) GetAuctionManagerAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetWhitelistedCreatorEntryAccount sets the "whitelistedCreatorEntry" account.
// A whitelisted creator entry for this store for the open edition
// pda of ['metaplex', store key, creator key] where creator key comes from creator list of metadata
func (inst *DeprecatedValidateParticipation) SetWhitelistedCreatorEntryAccount(whitelistedCreatorEntry ag_solanago.PublicKey) *DeprecatedValidateParticipation {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(whitelistedCreatorEntry)
	return inst
}

// GetWhitelistedCreatorEntryAccount gets the "whitelistedCreatorEntry" account.
// A whitelisted creator entry for this store for the open edition
// pda of ['metaplex', store key, creator key] where creator key comes from creator list of metadata
func (inst *DeprecatedValidateParticipation) GetWhitelistedCreatorEntryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAuctionManagerStoreAccount sets the "auctionManagerStore" account.
// The auction manager's store
func (inst *DeprecatedValidateParticipation) SetAuctionManagerStoreAccount(auctionManagerStore ag_solanago.PublicKey) *DeprecatedValidateParticipation {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(auctionManagerStore)
	return inst
}

// GetAuctionManagerStoreAccount gets the "auctionManagerStore" account.
// The auction manager's store
func (inst *DeprecatedValidateParticipation) GetAuctionManagerStoreAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSafetyDepositBoxAccount sets the "safetyDepositBox" account.
// Safety deposit box
func (inst *DeprecatedValidateParticipation) SetSafetyDepositBoxAccount(safetyDepositBox ag_solanago.PublicKey) *DeprecatedValidateParticipation {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(safetyDepositBox)
	return inst
}

// GetSafetyDepositBoxAccount gets the "safetyDepositBox" account.
// Safety deposit box
func (inst *DeprecatedValidateParticipation) GetSafetyDepositBoxAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSafetyDepositTokenStorageAccount sets the "safetyDepositTokenStorage" account.
// Safety deposit token store
func (inst *DeprecatedValidateParticipation) SetSafetyDepositTokenStorageAccount(safetyDepositTokenStorage ag_solanago.PublicKey) *DeprecatedValidateParticipation {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(safetyDepositTokenStorage)
	return inst
}

// GetSafetyDepositTokenStorageAccount gets the "safetyDepositTokenStorage" account.
// Safety deposit token store
func (inst *DeprecatedValidateParticipation) GetSafetyDepositTokenStorageAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetVaultAccount sets the "vault" account.
// Vault
func (inst *DeprecatedValidateParticipation) SetVaultAccount(vault ag_solanago.PublicKey) *DeprecatedValidateParticipation {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(vault)
	return inst
}

// GetVaultAccount gets the "vault" account.
// Vault
func (inst *DeprecatedValidateParticipation) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetRentSysvarAccount sets the "rentSysvar" account.
// Rent sysvar
func (inst *DeprecatedValidateParticipation) SetRentSysvarAccount(rentSysvar ag_solanago.PublicKey) *DeprecatedValidateParticipation {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(rentSysvar)
	return inst
}

// GetRentSysvarAccount gets the "rentSysvar" account.
// Rent sysvar
func (inst *DeprecatedValidateParticipation) GetRentSysvarAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst DeprecatedValidateParticipation) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_DeprecatedValidateParticipation),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DeprecatedValidateParticipation) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DeprecatedValidateParticipation) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.AuctionManager is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OpenEditionMetadata is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.OpenEditionMasterEdition is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PrintingAuthorizationTokenHoldingAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.AuctionManagerAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.WhitelistedCreatorEntry is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.AuctionManagerStore is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SafetyDepositBox is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SafetyDepositTokenStorage is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.RentSysvar is not set")
		}
	}
	return nil
}

func (inst *DeprecatedValidateParticipation) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DeprecatedValidateParticipation")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                   auctionManager", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              openEditionMetadata", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         openEditionMasterEdition", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("printingAuthorizationTokenHolding", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          auctionManagerAuthority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("          whitelistedCreatorEntry", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("              auctionManagerStore", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                 safetyDepositBox", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        safetyDepositTokenStorage", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                            vault", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                       rentSysvar", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj DeprecatedValidateParticipation) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *DeprecatedValidateParticipation) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewDeprecatedValidateParticipationInstruction declares a new DeprecatedValidateParticipation instruction with the provided parameters and accounts.
func NewDeprecatedValidateParticipationInstruction(
	// Accounts:
	auctionManager ag_solanago.PublicKey,
	openEditionMetadata ag_solanago.PublicKey,
	openEditionMasterEdition ag_solanago.PublicKey,
	printingAuthorizationTokenHoldingAccount ag_solanago.PublicKey,
	auctionManagerAuthority ag_solanago.PublicKey,
	whitelistedCreatorEntry ag_solanago.PublicKey,
	auctionManagerStore ag_solanago.PublicKey,
	safetyDepositBox ag_solanago.PublicKey,
	safetyDepositTokenStorage ag_solanago.PublicKey,
	vault ag_solanago.PublicKey,
	rentSysvar ag_solanago.PublicKey) *DeprecatedValidateParticipation {
	return NewDeprecatedValidateParticipationInstructionBuilder().
		SetAuctionManagerAccount(auctionManager).
		SetOpenEditionMetadataAccount(openEditionMetadata).
		SetOpenEditionMasterEditionAccount(openEditionMasterEdition).
		SetPrintingAuthorizationTokenHoldingAccount(printingAuthorizationTokenHoldingAccount).
		SetAuctionManagerAuthorityAccount(auctionManagerAuthority).
		SetWhitelistedCreatorEntryAccount(whitelistedCreatorEntry).
		SetAuctionManagerStoreAccount(auctionManagerStore).
		SetSafetyDepositBoxAccount(safetyDepositBox).
		SetSafetyDepositTokenStorageAccount(safetyDepositTokenStorage).
		SetVaultAccount(vault).
		SetRentSysvarAccount(rentSysvar)
}
