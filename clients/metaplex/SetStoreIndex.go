// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package metaplex

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Creates/Updates a store index page
type SetStoreIndex struct {
	Args *SetStoreIndexArgs

	// [0] = [WRITE] storeIndexPDA
	// ··········· Store index (pda of ['metaplex', program id, store key, 'index', page_number])
	//
	// [1] = [SIGNER] payerInfo
	// ··········· Payer info
	//
	// [2] = [] auctionCachePDA
	// ··········· Auction cache (pda of ['metaplex', program id, store key, auction key, 'cache'])
	//
	// [3] = [] storeKey
	// ··········· Store key
	//
	// [4] = [] system
	// ··········· System
	//
	// [5] = [] rentSysvar
	// ··········· Rent sysvar
	//
	// [6] = [] auctionCacheAbove
	// ··········· Auction cache above current (pda of ['metaplex', program id, store key, auction key, 'cache'])
	// ··········· Note: Can pass the below in this slot if there is no above
	//
	// [7] = [] auctionCacheBelow
	// ··········· Auction cache below current (pda of ['metaplex', program id, store key, auction key, 'cache'])
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetStoreIndexInstructionBuilder creates a new `SetStoreIndex` instruction builder.
func NewSetStoreIndexInstructionBuilder() *SetStoreIndex {
	nd := &SetStoreIndex{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *SetStoreIndex) SetArgs(args SetStoreIndexArgs) *SetStoreIndex {
	inst.Args = &args
	return inst
}

// SetStoreIndexPDAAccount sets the "storeIndexPDA" account.
// Store index (pda of ['metaplex', program id, store key, 'index', page_number])
func (inst *SetStoreIndex) SetStoreIndexPDAAccount(storeIndexPDA ag_solanago.PublicKey) *SetStoreIndex {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(storeIndexPDA).WRITE()
	return inst
}

// GetStoreIndexPDAAccount gets the "storeIndexPDA" account.
// Store index (pda of ['metaplex', program id, store key, 'index', page_number])
func (inst *SetStoreIndex) GetStoreIndexPDAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPayerInfoAccount sets the "payerInfo" account.
// Payer info
func (inst *SetStoreIndex) SetPayerInfoAccount(payerInfo ag_solanago.PublicKey) *SetStoreIndex {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(payerInfo).SIGNER()
	return inst
}

// GetPayerInfoAccount gets the "payerInfo" account.
// Payer info
func (inst *SetStoreIndex) GetPayerInfoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuctionCachePDAAccount sets the "auctionCachePDA" account.
// Auction cache (pda of ['metaplex', program id, store key, auction key, 'cache'])
func (inst *SetStoreIndex) SetAuctionCachePDAAccount(auctionCachePDA ag_solanago.PublicKey) *SetStoreIndex {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(auctionCachePDA)
	return inst
}

// GetAuctionCachePDAAccount gets the "auctionCachePDA" account.
// Auction cache (pda of ['metaplex', program id, store key, auction key, 'cache'])
func (inst *SetStoreIndex) GetAuctionCachePDAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetStoreKeyAccount sets the "storeKey" account.
// Store key
func (inst *SetStoreIndex) SetStoreKeyAccount(storeKey ag_solanago.PublicKey) *SetStoreIndex {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(storeKey)
	return inst
}

// GetStoreKeyAccount gets the "storeKey" account.
// Store key
func (inst *SetStoreIndex) GetStoreKeyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemAccount sets the "system" account.
// System
func (inst *SetStoreIndex) SetSystemAccount(system ag_solanago.PublicKey) *SetStoreIndex {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(system)
	return inst
}

// GetSystemAccount gets the "system" account.
// System
func (inst *SetStoreIndex) GetSystemAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetRentSysvarAccount sets the "rentSysvar" account.
// Rent sysvar
func (inst *SetStoreIndex) SetRentSysvarAccount(rentSysvar ag_solanago.PublicKey) *SetStoreIndex {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(rentSysvar)
	return inst
}

// GetRentSysvarAccount gets the "rentSysvar" account.
// Rent sysvar
func (inst *SetStoreIndex) GetRentSysvarAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAuctionCacheAboveAccount sets the "auctionCacheAbove" account.
// Auction cache above current (pda of ['metaplex', program id, store key, auction key, 'cache'])
// Note: Can pass the below in this slot if there is no above
func (inst *SetStoreIndex) SetAuctionCacheAboveAccount(auctionCacheAbove ag_solanago.PublicKey) *SetStoreIndex {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(auctionCacheAbove)
	return inst
}

// GetAuctionCacheAboveAccount gets the "auctionCacheAbove" account (optional).
// Auction cache above current (pda of ['metaplex', program id, store key, auction key, 'cache'])
// Note: Can pass the below in this slot if there is no above
func (inst *SetStoreIndex) GetAuctionCacheAboveAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAuctionCacheBelowAccount sets the "auctionCacheBelow" account.
// Auction cache below current (pda of ['metaplex', program id, store key, auction key, 'cache'])
func (inst *SetStoreIndex) SetAuctionCacheBelowAccount(auctionCacheBelow ag_solanago.PublicKey) *SetStoreIndex {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(auctionCacheBelow)
	return inst
}

// GetAuctionCacheBelowAccount gets the "auctionCacheBelow" account (optional).
// Auction cache below current (pda of ['metaplex', program id, store key, auction key, 'cache'])
func (inst *SetStoreIndex) GetAuctionCacheBelowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst SetStoreIndex) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_SetStoreIndex),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetStoreIndex) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetStoreIndex) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.StoreIndexPDA is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PayerInfo is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AuctionCachePDA is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.StoreKey is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.System is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.RentSysvar is not set")
		}

		// [6] = AuctionCacheAbove is optional

		// [7] = AuctionCacheBelow is optional

	}
	return nil
}

func (inst *SetStoreIndex) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetStoreIndex")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    storeIndexPDA", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        payerInfo", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  auctionCachePDA", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         storeKey", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           system", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       rentSysvar", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("auctionCacheAbove", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("auctionCacheBelow", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj SetStoreIndex) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetStoreIndex) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewSetStoreIndexInstruction declares a new SetStoreIndex instruction with the provided parameters and accounts.
func NewSetStoreIndexInstruction(
	// Parameters:
	args SetStoreIndexArgs,
	// Accounts:
	storeIndexPDA ag_solanago.PublicKey,
	payerInfo ag_solanago.PublicKey,
	auctionCachePDA ag_solanago.PublicKey,
	storeKey ag_solanago.PublicKey,
	system ag_solanago.PublicKey,
	rentSysvar ag_solanago.PublicKey,
	auctionCacheAbove ag_solanago.PublicKey,
	auctionCacheBelow ag_solanago.PublicKey) *SetStoreIndex {
	return NewSetStoreIndexInstructionBuilder().
		SetArgs(args).
		SetStoreIndexPDAAccount(storeIndexPDA).
		SetPayerInfoAccount(payerInfo).
		SetAuctionCachePDAAccount(auctionCachePDA).
		SetStoreKeyAccount(storeKey).
		SetSystemAccount(system).
		SetRentSysvarAccount(rentSysvar).
		SetAuctionCacheAboveAccount(auctionCacheAbove).
		SetAuctionCacheBelowAccount(auctionCacheBelow)
}
