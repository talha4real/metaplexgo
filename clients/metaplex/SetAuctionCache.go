// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package metaplex

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Creates/Updates a store index page
type SetAuctionCache struct {

	// [0] = [WRITE] auctionCachePDA
	// ··········· Auction cache (pda of ['metaplex', program id, store key, auction key, 'cache'])
	//
	// [1] = [SIGNER] payer
	// ··········· Payer info
	//
	// [2] = [] auction
	// ··········· Auction
	//
	// [3] = [] safetyDepositBox
	// ··········· Safety deposit box account
	//
	// [4] = [] auctionManager
	// ··········· Auction manager
	//
	// [5] = [] store
	// ··········· Store key
	//
	// [6] = [] system
	// ··········· System
	//
	// [7] = [] rentSysvar
	// ··········· Rent sysvar
	//
	// [8] = [] clockSysvar
	// ··········· Clock sysvar
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetAuctionCacheInstructionBuilder creates a new `SetAuctionCache` instruction builder.
func NewSetAuctionCacheInstructionBuilder() *SetAuctionCache {
	nd := &SetAuctionCache{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetAuctionCachePDAAccount sets the "auctionCachePDA" account.
// Auction cache (pda of ['metaplex', program id, store key, auction key, 'cache'])
func (inst *SetAuctionCache) SetAuctionCachePDAAccount(auctionCachePDA ag_solanago.PublicKey) *SetAuctionCache {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(auctionCachePDA).WRITE()
	return inst
}

// GetAuctionCachePDAAccount gets the "auctionCachePDA" account.
// Auction cache (pda of ['metaplex', program id, store key, auction key, 'cache'])
func (inst *SetAuctionCache) GetAuctionCachePDAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPayerAccount sets the "payer" account.
// Payer info
func (inst *SetAuctionCache) SetPayerAccount(payer ag_solanago.PublicKey) *SetAuctionCache {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(payer).SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// Payer info
func (inst *SetAuctionCache) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuctionAccount sets the "auction" account.
// Auction
func (inst *SetAuctionCache) SetAuctionAccount(auction ag_solanago.PublicKey) *SetAuctionCache {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(auction)
	return inst
}

// GetAuctionAccount gets the "auction" account.
// Auction
func (inst *SetAuctionCache) GetAuctionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSafetyDepositBoxAccount sets the "safetyDepositBox" account.
// Safety deposit box account
func (inst *SetAuctionCache) SetSafetyDepositBoxAccount(safetyDepositBox ag_solanago.PublicKey) *SetAuctionCache {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(safetyDepositBox)
	return inst
}

// GetSafetyDepositBoxAccount gets the "safetyDepositBox" account.
// Safety deposit box account
func (inst *SetAuctionCache) GetSafetyDepositBoxAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAuctionManagerAccount sets the "auctionManager" account.
// Auction manager
func (inst *SetAuctionCache) SetAuctionManagerAccount(auctionManager ag_solanago.PublicKey) *SetAuctionCache {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(auctionManager)
	return inst
}

// GetAuctionManagerAccount gets the "auctionManager" account.
// Auction manager
func (inst *SetAuctionCache) GetAuctionManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetStoreAccount sets the "store" account.
// Store key
func (inst *SetAuctionCache) SetStoreAccount(store ag_solanago.PublicKey) *SetAuctionCache {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(store)
	return inst
}

// GetStoreAccount gets the "store" account.
// Store key
func (inst *SetAuctionCache) GetStoreAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemAccount sets the "system" account.
// System
func (inst *SetAuctionCache) SetSystemAccount(system ag_solanago.PublicKey) *SetAuctionCache {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(system)
	return inst
}

// GetSystemAccount gets the "system" account.
// System
func (inst *SetAuctionCache) GetSystemAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetRentSysvarAccount sets the "rentSysvar" account.
// Rent sysvar
func (inst *SetAuctionCache) SetRentSysvarAccount(rentSysvar ag_solanago.PublicKey) *SetAuctionCache {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(rentSysvar)
	return inst
}

// GetRentSysvarAccount gets the "rentSysvar" account.
// Rent sysvar
func (inst *SetAuctionCache) GetRentSysvarAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetClockSysvarAccount sets the "clockSysvar" account.
// Clock sysvar
func (inst *SetAuctionCache) SetClockSysvarAccount(clockSysvar ag_solanago.PublicKey) *SetAuctionCache {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(clockSysvar)
	return inst
}

// GetClockSysvarAccount gets the "clockSysvar" account.
// Clock sysvar
func (inst *SetAuctionCache) GetClockSysvarAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst SetAuctionCache) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_SetAuctionCache),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetAuctionCache) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetAuctionCache) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.AuctionCachePDA is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Auction is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SafetyDepositBox is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.AuctionManager is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Store is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.System is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.RentSysvar is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.ClockSysvar is not set")
		}
	}
	return nil
}

func (inst *SetAuctionCache) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetAuctionCache")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" auctionCachePDA", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           payer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         auction", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("safetyDepositBox", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  auctionManager", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("           store", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("          system", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      rentSysvar", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("     clockSysvar", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj SetAuctionCache) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *SetAuctionCache) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewSetAuctionCacheInstruction declares a new SetAuctionCache instruction with the provided parameters and accounts.
func NewSetAuctionCacheInstruction(
	// Accounts:
	auctionCachePDA ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	auction ag_solanago.PublicKey,
	safetyDepositBox ag_solanago.PublicKey,
	auctionManager ag_solanago.PublicKey,
	store ag_solanago.PublicKey,
	system ag_solanago.PublicKey,
	rentSysvar ag_solanago.PublicKey,
	clockSysvar ag_solanago.PublicKey) *SetAuctionCache {
	return NewSetAuctionCacheInstructionBuilder().
		SetAuctionCachePDAAccount(auctionCachePDA).
		SetPayerAccount(payer).
		SetAuctionAccount(auction).
		SetSafetyDepositBoxAccount(safetyDepositBox).
		SetAuctionManagerAccount(auctionManager).
		SetStoreAccount(store).
		SetSystemAccount(system).
		SetRentSysvarAccount(rentSysvar).
		SetClockSysvarAccount(clockSysvar)
}
