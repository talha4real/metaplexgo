// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package metaplex

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// If you are an auctioneer, redeem an unused winning config entry. You provide the winning index, and if the winning
// index has no winner, then the correct redemption method is called with a special flag set to ignore bidder_metadata checks
// and a hardcoded winner index to empty this win to you.
//
// All the keys, in exact sequence, should follow the expected call you wish to proxy to, because these will be passed
// to the process_ method of the next call. This method exists primarily to pass in an additional
// argument to the other redemption methods that subtly changes their behavior. We made this additional call so that if the auctioneer
// calls those methods directly, they still act the same as if the auctioneer were a normal bidder, which is be desirable behavior.
//
// An auctioneer should never be in the position where the auction can never work the same for them simply because they are an auctioneer.
// This special endpoint exists to give them the "out" to unload items via a proxy call once the auction is over.
type RedeemUnusedWinningConfigItemsAsAuctioneer struct {
	Args *RedeemUnusedWinningConfigItemsAsAuctioneerArgs

	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRedeemUnusedWinningConfigItemsAsAuctioneerInstructionBuilder creates a new `RedeemUnusedWinningConfigItemsAsAuctioneer` instruction builder.
func NewRedeemUnusedWinningConfigItemsAsAuctioneerInstructionBuilder() *RedeemUnusedWinningConfigItemsAsAuctioneer {
	nd := &RedeemUnusedWinningConfigItemsAsAuctioneer{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 0),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *RedeemUnusedWinningConfigItemsAsAuctioneer) SetArgs(args RedeemUnusedWinningConfigItemsAsAuctioneerArgs) *RedeemUnusedWinningConfigItemsAsAuctioneer {
	inst.Args = &args
	return inst
}

func (inst RedeemUnusedWinningConfigItemsAsAuctioneer) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_RedeemUnusedWinningConfigItemsAsAuctioneer),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RedeemUnusedWinningConfigItemsAsAuctioneer) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RedeemUnusedWinningConfigItemsAsAuctioneer) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
	}
	return nil
}

func (inst *RedeemUnusedWinningConfigItemsAsAuctioneer) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RedeemUnusedWinningConfigItemsAsAuctioneer")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=0]").ParentFunc(func(accountsBranch ag_treeout.Branches) {})
				})
		})
}

func (obj RedeemUnusedWinningConfigItemsAsAuctioneer) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *RedeemUnusedWinningConfigItemsAsAuctioneer) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewRedeemUnusedWinningConfigItemsAsAuctioneerInstruction declares a new RedeemUnusedWinningConfigItemsAsAuctioneer instruction with the provided parameters and accounts.
func NewRedeemUnusedWinningConfigItemsAsAuctioneerInstruction(
	// Parameters:
	args RedeemUnusedWinningConfigItemsAsAuctioneerArgs) *RedeemUnusedWinningConfigItemsAsAuctioneer {
	return NewRedeemUnusedWinningConfigItemsAsAuctioneerInstructionBuilder().
		SetArgs(args)
}
