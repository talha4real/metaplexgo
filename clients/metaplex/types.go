// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package metaplex

import ag_binary "github.com/gagliardetto/binary"

type AmountRange struct {
	F0 uint64
	F1 uint64
}

func (obj AmountRange) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `F0` param:
	err = encoder.Encode(obj.F0)
	if err != nil {
		return err
	}
	// Serialize `F1` param:
	err = encoder.Encode(obj.F1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AmountRange) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `F0`:
	err = decoder.Decode(&obj.F0)
	if err != nil {
		return err
	}
	// Deserialize `F1`:
	err = decoder.Decode(&obj.F1)
	if err != nil {
		return err
	}
	return nil
}

type InitAuctionManagerV2Args struct {
	AmountType TupleNumericType
	LengthType TupleNumericType
	MaxRanges  uint64
}

func (obj InitAuctionManagerV2Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountType` param:
	err = encoder.Encode(obj.AmountType)
	if err != nil {
		return err
	}
	// Serialize `LengthType` param:
	err = encoder.Encode(obj.LengthType)
	if err != nil {
		return err
	}
	// Serialize `MaxRanges` param:
	err = encoder.Encode(obj.MaxRanges)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitAuctionManagerV2Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountType`:
	err = decoder.Decode(&obj.AmountType)
	if err != nil {
		return err
	}
	// Deserialize `LengthType`:
	err = decoder.Decode(&obj.LengthType)
	if err != nil {
		return err
	}
	// Deserialize `MaxRanges`:
	err = decoder.Decode(&obj.MaxRanges)
	if err != nil {
		return err
	}
	return nil
}

type RedeemParticipationBidV3Args struct {
	WinIndex *uint64 `bin:"optional"`
}

func (obj RedeemParticipationBidV3Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WinIndex` param (optional):
	{
		if obj.WinIndex == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.WinIndex)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *RedeemParticipationBidV3Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WinIndex` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.WinIndex)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type AuctionManagerSettings struct {
	// The safety deposit box index in the vault containing the winning items, in order of place
	// The same index can appear multiple times if that index contains n tokens for n appearances (this will be checked)
	WinningConfigs []WinningConfig

	// The participation config is separated because it is structurally a bit different,
	// having different options and also because it has no real "winning place" in the array.
	ParticipationConfig *ParticipationConfig `bin:"optional"`
}

func (obj AuctionManagerSettings) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WinningConfigs` param:
	err = encoder.Encode(obj.WinningConfigs)
	if err != nil {
		return err
	}
	// Serialize `ParticipationConfig` param (optional):
	{
		if obj.ParticipationConfig == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ParticipationConfig)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *AuctionManagerSettings) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WinningConfigs`:
	err = decoder.Decode(&obj.WinningConfigs)
	if err != nil {
		return err
	}
	// Deserialize `ParticipationConfig` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ParticipationConfig)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type ParticipationConfig struct {
	// Setups:
	// 1. Winners get participation + not charged extra
	// 2. Winners dont get participation prize
	WinnerConstraint WinningConstraint

	// Setups:
	// 1. Losers get prize for free
	// 2. Losers get prize but pay fixed price
	// 3. Losers get prize but pay bid price
	NonWinningConstraint NonWinningConstraint

	// The safety deposit box index in the vault containing the template for the participation prize
	SafetyDepositBoxIndex uint8

	// Setting this field disconnects the participation prizes price from the bid. Any bid you submit, regardless
	// of amount, charges you the same fixed price.
	FixedPrice *uint64 `bin:"optional"`
}

func (obj ParticipationConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WinnerConstraint` param:
	err = encoder.Encode(obj.WinnerConstraint)
	if err != nil {
		return err
	}
	// Serialize `NonWinningConstraint` param:
	err = encoder.Encode(obj.NonWinningConstraint)
	if err != nil {
		return err
	}
	// Serialize `SafetyDepositBoxIndex` param:
	err = encoder.Encode(obj.SafetyDepositBoxIndex)
	if err != nil {
		return err
	}
	// Serialize `FixedPrice` param (optional):
	{
		if obj.FixedPrice == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.FixedPrice)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *ParticipationConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WinnerConstraint`:
	err = decoder.Decode(&obj.WinnerConstraint)
	if err != nil {
		return err
	}
	// Deserialize `NonWinningConstraint`:
	err = decoder.Decode(&obj.NonWinningConstraint)
	if err != nil {
		return err
	}
	// Deserialize `SafetyDepositBoxIndex`:
	err = decoder.Decode(&obj.SafetyDepositBoxIndex)
	if err != nil {
		return err
	}
	// Deserialize `FixedPrice` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.FixedPrice)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type EmptyPaymentAccountArgs struct {
	// If not redeeming a participation NFT's contributions, need to provide
	// the winning config index your redeeming for. For participation, just pass None.
	WinningConfigIndex *uint8 `bin:"optional"`

	// If not redeeming a participation NFT, you also need to index into the winning config item's list.
	WinningConfigItemIndex *uint64 `bin:"optional"`

	// index in the metadata creator list, can be None if metadata has no creator list.
	CreatorIndex *uint8 `bin:"optional"`
}

func (obj EmptyPaymentAccountArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WinningConfigIndex` param (optional):
	{
		if obj.WinningConfigIndex == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.WinningConfigIndex)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `WinningConfigItemIndex` param (optional):
	{
		if obj.WinningConfigItemIndex == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.WinningConfigItemIndex)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `CreatorIndex` param (optional):
	{
		if obj.CreatorIndex == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.CreatorIndex)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *EmptyPaymentAccountArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WinningConfigIndex` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.WinningConfigIndex)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `WinningConfigItemIndex` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.WinningConfigItemIndex)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `CreatorIndex` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.CreatorIndex)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type SetStoreArgs struct {
	Public bool
}

func (obj SetStoreArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Public` param:
	err = encoder.Encode(obj.Public)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SetStoreArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Public`:
	err = decoder.Decode(&obj.Public)
	if err != nil {
		return err
	}
	return nil
}

type SetWhitelistedCreatorArgs struct {
	Activated bool
}

func (obj SetWhitelistedCreatorArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Activated` param:
	err = encoder.Encode(obj.Activated)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SetWhitelistedCreatorArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Activated`:
	err = decoder.Decode(&obj.Activated)
	if err != nil {
		return err
	}
	return nil
}

type RedeemUnusedWinningConfigItemsAsAuctioneerArgs struct {
	WinningConfigItemIndex uint64
	ProxyCall              ProxyCallAddress
}

func (obj RedeemUnusedWinningConfigItemsAsAuctioneerArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WinningConfigItemIndex` param:
	err = encoder.Encode(obj.WinningConfigItemIndex)
	if err != nil {
		return err
	}
	// Serialize `ProxyCall` param:
	err = encoder.Encode(obj.ProxyCall)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RedeemUnusedWinningConfigItemsAsAuctioneerArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WinningConfigItemIndex`:
	err = decoder.Decode(&obj.WinningConfigItemIndex)
	if err != nil {
		return err
	}
	// Deserialize `ProxyCall`:
	err = decoder.Decode(&obj.ProxyCall)
	if err != nil {
		return err
	}
	return nil
}

type ProxyCallAddress ag_binary.BorshEnum

const (
	ProxyCallAddressRedeemBid ProxyCallAddress = iota
	ProxyCallAddressRedeemFullRightsTransferBid
)

func (value ProxyCallAddress) String() string {
	switch value {
	case ProxyCallAddressRedeemBid:
		return "RedeemBid"
	case ProxyCallAddressRedeemFullRightsTransferBid:
		return "RedeemFullRightsTransferBid"
	default:
		return ""
	}
}

type RedeemPrintingV2BidArgs struct {
	EditionOffset uint64
	WinIndex      uint64
}

func (obj RedeemPrintingV2BidArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `EditionOffset` param:
	err = encoder.Encode(obj.EditionOffset)
	if err != nil {
		return err
	}
	// Serialize `WinIndex` param:
	err = encoder.Encode(obj.WinIndex)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RedeemPrintingV2BidArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `EditionOffset`:
	err = decoder.Decode(&obj.EditionOffset)
	if err != nil {
		return err
	}
	// Deserialize `WinIndex`:
	err = decoder.Decode(&obj.WinIndex)
	if err != nil {
		return err
	}
	return nil
}

type EndAuctionArgs struct {
	// If the auction was blinded, a revealing price must be specified to release the auction
	// winnings.
	Reveal *Revealer `bin:"optional"`
}

func (obj EndAuctionArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Reveal` param (optional):
	{
		if obj.Reveal == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Reveal)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *EndAuctionArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Reveal` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Reveal)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type Revealer struct {
	Price uint64
	Salt  uint64
}

func (obj Revealer) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `Salt` param:
	err = encoder.Encode(obj.Salt)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Revealer) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `Salt`:
	err = decoder.Decode(&obj.Salt)
	if err != nil {
		return err
	}
	return nil
}

type SetStoreIndexArgs struct {
	Page   uint64
	Offset uint64
}

func (obj SetStoreIndexArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Page` param:
	err = encoder.Encode(obj.Page)
	if err != nil {
		return err
	}
	// Serialize `Offset` param:
	err = encoder.Encode(obj.Offset)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SetStoreIndexArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Page`:
	err = decoder.Decode(&obj.Page)
	if err != nil {
		return err
	}
	// Deserialize `Offset`:
	err = decoder.Decode(&obj.Offset)
	if err != nil {
		return err
	}
	return nil
}

type SetStoreV2Args struct {
	Public      bool
	SettingsUri *string `bin:"optional"`
}

func (obj SetStoreV2Args) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Public` param:
	err = encoder.Encode(obj.Public)
	if err != nil {
		return err
	}
	// Serialize `SettingsUri` param (optional):
	{
		if obj.SettingsUri == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SettingsUri)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *SetStoreV2Args) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Public`:
	err = decoder.Decode(&obj.Public)
	if err != nil {
		return err
	}
	// Deserialize `SettingsUri` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SettingsUri)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
