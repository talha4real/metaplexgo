// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package metaplex

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Permissionless call to redeem the master edition in a given safety deposit for a PrintingV2 winning config to the
// ATA of the Auctioneer. Can only be called once all redemptions have been met.
type WithdrawMasterEdition struct {

	// [0] = [WRITE] auctionManager
	// ··········· Auction manager
	//
	// [1] = [WRITE] safetyDepositTokenStorage
	// ··········· Safety deposit token storage account
	//
	// [2] = [WRITE] associatedTokenAccount
	// ··········· Associated token account owned by auction manager authority of same mint as token storage account
	//
	// [3] = [WRITE] safetyDepositBox
	// ··········· Safety deposit box account
	//
	// [4] = [WRITE] vaultAccount
	// ··········· Vault account
	//
	// [5] = [WRITE] fractionMint
	// ··········· Fraction mint of the vault
	//
	// [6] = [] prizeTrackingTicket
	// ··········· Prize tracking ticket (pda of ['metaplex', program id, auction manager key, metadata mint id])
	//
	// [7] = [] pdaBasedVaultTransferAuthority
	// ··········· PDA-based Vault transfer authority ['vault', program_id, vault key]
	// ··········· but please note that this is a PDA relative to the Token Vault program, with the 'vault' prefix
	//
	// [8] = [] auction
	// ··········· Auction
	//
	// [9] = [] auctionDataExtended
	// ··········· Auction data extended (pda relative to auction of ['auction', program id, vault key, 'extended'])
	//
	// [10] = [] tokenProgram
	// ··········· Token program
	//
	// [11] = [] tokenVaultProgram
	// ··········· Token Vault program
	//
	// [12] = [] store
	// ··········· Store
	//
	// [13] = [] rentSysvar
	// ··········· Rent sysvar
	//
	// [14] = [] safetyDepositConfig
	// ··········· Safety deposit config pda of ['metaplex', program id, auction manager, safety deposit]
	// ··········· This account will only get used in the event this is an AuctionManagerV2
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawMasterEditionInstructionBuilder creates a new `WithdrawMasterEdition` instruction builder.
func NewWithdrawMasterEditionInstructionBuilder() *WithdrawMasterEdition {
	nd := &WithdrawMasterEdition{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 15),
	}
	return nd
}

// SetAuctionManagerAccount sets the "auctionManager" account.
// Auction manager
func (inst *WithdrawMasterEdition) SetAuctionManagerAccount(auctionManager ag_solanago.PublicKey) *WithdrawMasterEdition {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(auctionManager).WRITE()
	return inst
}

// GetAuctionManagerAccount gets the "auctionManager" account.
// Auction manager
func (inst *WithdrawMasterEdition) GetAuctionManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSafetyDepositTokenStorageAccount sets the "safetyDepositTokenStorage" account.
// Safety deposit token storage account
func (inst *WithdrawMasterEdition) SetSafetyDepositTokenStorageAccount(safetyDepositTokenStorage ag_solanago.PublicKey) *WithdrawMasterEdition {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(safetyDepositTokenStorage).WRITE()
	return inst
}

// GetSafetyDepositTokenStorageAccount gets the "safetyDepositTokenStorage" account.
// Safety deposit token storage account
func (inst *WithdrawMasterEdition) GetSafetyDepositTokenStorageAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAssociatedTokenAccount sets the "associatedTokenAccount" account.
// Associated token account owned by auction manager authority of same mint as token storage account
func (inst *WithdrawMasterEdition) SetAssociatedTokenAccount(associatedTokenAccount ag_solanago.PublicKey) *WithdrawMasterEdition {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(associatedTokenAccount).WRITE()
	return inst
}

// GetAssociatedTokenAccount gets the "associatedTokenAccount" account.
// Associated token account owned by auction manager authority of same mint as token storage account
func (inst *WithdrawMasterEdition) GetAssociatedTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSafetyDepositBoxAccount sets the "safetyDepositBox" account.
// Safety deposit box account
func (inst *WithdrawMasterEdition) SetSafetyDepositBoxAccount(safetyDepositBox ag_solanago.PublicKey) *WithdrawMasterEdition {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(safetyDepositBox).WRITE()
	return inst
}

// GetSafetyDepositBoxAccount gets the "safetyDepositBox" account.
// Safety deposit box account
func (inst *WithdrawMasterEdition) GetSafetyDepositBoxAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetVaultAccount sets the "vaultAccount" account.
// Vault account
func (inst *WithdrawMasterEdition) SetVaultAccount(vaultAccount ag_solanago.PublicKey) *WithdrawMasterEdition {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(vaultAccount).WRITE()
	return inst
}

// GetVaultAccount gets the "vaultAccount" account.
// Vault account
func (inst *WithdrawMasterEdition) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetFractionMintAccount sets the "fractionMint" account.
// Fraction mint of the vault
func (inst *WithdrawMasterEdition) SetFractionMintAccount(fractionMint ag_solanago.PublicKey) *WithdrawMasterEdition {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(fractionMint).WRITE()
	return inst
}

// GetFractionMintAccount gets the "fractionMint" account.
// Fraction mint of the vault
func (inst *WithdrawMasterEdition) GetFractionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPrizeTrackingTicketAccount sets the "prizeTrackingTicket" account.
// Prize tracking ticket (pda of ['metaplex', program id, auction manager key, metadata mint id])
func (inst *WithdrawMasterEdition) SetPrizeTrackingTicketAccount(prizeTrackingTicket ag_solanago.PublicKey) *WithdrawMasterEdition {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(prizeTrackingTicket)
	return inst
}

// GetPrizeTrackingTicketAccount gets the "prizeTrackingTicket" account.
// Prize tracking ticket (pda of ['metaplex', program id, auction manager key, metadata mint id])
func (inst *WithdrawMasterEdition) GetPrizeTrackingTicketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetPdaBasedVaultTransferAuthorityAccount sets the "pdaBasedVaultTransferAuthority" account.
// PDA-based Vault transfer authority ['vault', program_id, vault key]
// but please note that this is a PDA relative to the Token Vault program, with the 'vault' prefix
func (inst *WithdrawMasterEdition) SetPdaBasedVaultTransferAuthorityAccount(pdaBasedVaultTransferAuthority ag_solanago.PublicKey) *WithdrawMasterEdition {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(pdaBasedVaultTransferAuthority)
	return inst
}

// GetPdaBasedVaultTransferAuthorityAccount gets the "pdaBasedVaultTransferAuthority" account.
// PDA-based Vault transfer authority ['vault', program_id, vault key]
// but please note that this is a PDA relative to the Token Vault program, with the 'vault' prefix
func (inst *WithdrawMasterEdition) GetPdaBasedVaultTransferAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAuctionAccount sets the "auction" account.
// Auction
func (inst *WithdrawMasterEdition) SetAuctionAccount(auction ag_solanago.PublicKey) *WithdrawMasterEdition {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(auction)
	return inst
}

// GetAuctionAccount gets the "auction" account.
// Auction
func (inst *WithdrawMasterEdition) GetAuctionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetAuctionDataExtendedAccount sets the "auctionDataExtended" account.
// Auction data extended (pda relative to auction of ['auction', program id, vault key, 'extended'])
func (inst *WithdrawMasterEdition) SetAuctionDataExtendedAccount(auctionDataExtended ag_solanago.PublicKey) *WithdrawMasterEdition {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(auctionDataExtended)
	return inst
}

// GetAuctionDataExtendedAccount gets the "auctionDataExtended" account.
// Auction data extended (pda relative to auction of ['auction', program id, vault key, 'extended'])
func (inst *WithdrawMasterEdition) GetAuctionDataExtendedAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
// Token program
func (inst *WithdrawMasterEdition) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *WithdrawMasterEdition {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
// Token program
func (inst *WithdrawMasterEdition) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenVaultProgramAccount sets the "tokenVaultProgram" account.
// Token Vault program
func (inst *WithdrawMasterEdition) SetTokenVaultProgramAccount(tokenVaultProgram ag_solanago.PublicKey) *WithdrawMasterEdition {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenVaultProgram)
	return inst
}

// GetTokenVaultProgramAccount gets the "tokenVaultProgram" account.
// Token Vault program
func (inst *WithdrawMasterEdition) GetTokenVaultProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetStoreAccount sets the "store" account.
// Store
func (inst *WithdrawMasterEdition) SetStoreAccount(store ag_solanago.PublicKey) *WithdrawMasterEdition {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(store)
	return inst
}

// GetStoreAccount gets the "store" account.
// Store
func (inst *WithdrawMasterEdition) GetStoreAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetRentSysvarAccount sets the "rentSysvar" account.
// Rent sysvar
func (inst *WithdrawMasterEdition) SetRentSysvarAccount(rentSysvar ag_solanago.PublicKey) *WithdrawMasterEdition {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(rentSysvar)
	return inst
}

// GetRentSysvarAccount gets the "rentSysvar" account.
// Rent sysvar
func (inst *WithdrawMasterEdition) GetRentSysvarAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetSafetyDepositConfigAccount sets the "safetyDepositConfig" account.
// Safety deposit config pda of ['metaplex', program id, auction manager, safety deposit]
// This account will only get used in the event this is an AuctionManagerV2
func (inst *WithdrawMasterEdition) SetSafetyDepositConfigAccount(safetyDepositConfig ag_solanago.PublicKey) *WithdrawMasterEdition {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(safetyDepositConfig)
	return inst
}

// GetSafetyDepositConfigAccount gets the "safetyDepositConfig" account.
// Safety deposit config pda of ['metaplex', program id, auction manager, safety deposit]
// This account will only get used in the event this is an AuctionManagerV2
func (inst *WithdrawMasterEdition) GetSafetyDepositConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

func (inst WithdrawMasterEdition) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_WithdrawMasterEdition),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawMasterEdition) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawMasterEdition) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.AuctionManager is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SafetyDepositTokenStorage is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AssociatedTokenAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SafetyDepositBox is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.VaultAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.FractionMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.PrizeTrackingTicket is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.PdaBasedVaultTransferAuthority is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Auction is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.AuctionDataExtended is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenVaultProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Store is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.RentSysvar is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.SafetyDepositConfig is not set")
		}
	}
	return nil
}

func (inst *WithdrawMasterEdition) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawMasterEdition")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=15]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                auctionManager", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     safetyDepositTokenStorage", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("               associatedToken", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("              safetyDepositBox", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                         vault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                  fractionMint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("           prizeTrackingTicket", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("pdaBasedVaultTransferAuthority", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                       auction", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("           auctionDataExtended", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                  tokenProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("             tokenVaultProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("                         store", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("                    rentSysvar", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("           safetyDepositConfig", inst.AccountMetaSlice.Get(14)))
					})
				})
		})
}

func (obj WithdrawMasterEdition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *WithdrawMasterEdition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewWithdrawMasterEditionInstruction declares a new WithdrawMasterEdition instruction with the provided parameters and accounts.
func NewWithdrawMasterEditionInstruction(
	// Accounts:
	auctionManager ag_solanago.PublicKey,
	safetyDepositTokenStorage ag_solanago.PublicKey,
	associatedTokenAccount ag_solanago.PublicKey,
	safetyDepositBox ag_solanago.PublicKey,
	vaultAccount ag_solanago.PublicKey,
	fractionMint ag_solanago.PublicKey,
	prizeTrackingTicket ag_solanago.PublicKey,
	pdaBasedVaultTransferAuthority ag_solanago.PublicKey,
	auction ag_solanago.PublicKey,
	auctionDataExtended ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	tokenVaultProgram ag_solanago.PublicKey,
	store ag_solanago.PublicKey,
	rentSysvar ag_solanago.PublicKey,
	safetyDepositConfig ag_solanago.PublicKey) *WithdrawMasterEdition {
	return NewWithdrawMasterEditionInstructionBuilder().
		SetAuctionManagerAccount(auctionManager).
		SetSafetyDepositTokenStorageAccount(safetyDepositTokenStorage).
		SetAssociatedTokenAccount(associatedTokenAccount).
		SetSafetyDepositBoxAccount(safetyDepositBox).
		SetVaultAccount(vaultAccount).
		SetFractionMintAccount(fractionMint).
		SetPrizeTrackingTicketAccount(prizeTrackingTicket).
		SetPdaBasedVaultTransferAuthorityAccount(pdaBasedVaultTransferAuthority).
		SetAuctionAccount(auction).
		SetAuctionDataExtendedAccount(auctionDataExtended).
		SetTokenProgramAccount(tokenProgram).
		SetTokenVaultProgramAccount(tokenVaultProgram).
		SetStoreAccount(store).
		SetRentSysvarAccount(rentSysvar).
		SetSafetyDepositConfigAccount(safetyDepositConfig)
}
