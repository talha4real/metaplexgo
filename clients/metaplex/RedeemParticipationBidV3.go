// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package metaplex

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Note: This requires that auction manager be in a Running state.
//
// Second note: V3 is the same as V2, but it requires an additional argument because it is intended to be used with AuctionManagerV2s,
// not V1s, which use BidRedemptionTicketV2s, which require this additional argument (the user_provided_win_index).
// You can in theory pay for someone else's participation NFT and gift it to them.
//
// If an auction is complete, you can redeem your bid for an Open Edition token if it is eligible. If you are the first to do this,
// The auction manager will switch from Running state to Disbursing state. If you are the last, this may change
// the auction manager state to Finished provided that no authorities remain to be delegated for Master Edition tokens.
//
// NOTE: Please note that it is totally possible to redeem a bid 2x - once for a prize you won and once at this end point for a open edition
// that comes as a 'token of appreciation' for bidding. They are not mutually exclusive unless explicitly set to be that way.
//
// NOTE: If you are redeeming a newly minted Open Edition, you must actually supply a destination account containing a token from a brand new
// mint. We do not provide the token to you. Our job with this action is to christen this mint + token combo as an official Open Edition.
type RedeemParticipationBidV3 struct {
	Args *RedeemParticipationBidV3Args

	// [0] = [WRITE] auctionManager
	// ··········· Auction manager
	//
	// [1] = [WRITE] safetyDepositTokenStorage
	// ··········· Safety deposit token storage account
	//
	// [2] = [WRITE] singleItemAccount
	// ··········· Account containing 1 token of your new mint type.
	// ··········· MUST be an associated token account of pda [wallet, token program, mint] relative to ata program.
	//
	// [3] = [WRITE] bidRedemptionKey
	// ··········· Bid redemption key -
	// ··········· Just a PDA with seed ['metaplex', auction_key, bidder_metadata_key] that we will allocate to mark that you redeemed your bid
	//
	// [4] = [] safetyDepositBox
	// ··········· Safety deposit box account
	//
	// [5] = [] vaultAccount
	// ··········· Vault account
	//
	// [6] = [WRITE] safetyDepositConfig
	// ··········· Safety deposit config pda of ['metaplex', program id, auction manager, safety deposit]
	// ··········· This account will only get used in the event this is an AuctionManagerV2
	//
	// [7] = [] auction
	// ··········· Auction
	//
	// [8] = [] bidderMetadata
	// ··········· Your BidderMetadata account
	//
	// [9] = [] bidder
	// ··········· Your Bidder account
	//
	// [10] = [SIGNER] payer
	// ··········· Payer
	//
	// [11] = [] tokenProgram
	// ··········· Token program
	//
	// [12] = [] tokenVaultProgram
	// ··········· Token Vault program
	//
	// [13] = [] tokenMetadataProgram
	// ··········· Token metadata program
	//
	// [14] = [] store
	// ··········· Store
	//
	// [15] = [] system
	// ··········· System
	//
	// [16] = [] rentSysvar
	// ··········· Rent sysvar
	//
	// [17] = [SIGNER] transferAuthority
	// ··········· Transfer authority to move the payment in the auction's token_mint coin from the bidder account for the participation_fixed_price
	// ··········· on the auction manager to the auction manager account itself.
	//
	// [18] = [WRITE] acceptPayment
	// ··········· The accept payment account for the auction manager
	//
	// [19] = [WRITE] tokenAccount
	// ··········· The token account you will potentially pay for the open edition bid with if necessary.
	//
	// [20] = [WRITE] prizeTrackingTicket
	// ··········· Prize tracking ticket (pda of ['metaplex', program id, auction manager key, metadata mint id])
	//
	// [21] = [WRITE] newMetadataKey
	// ··········· New Metadata key (pda of ['metadata', program id, mint id])
	//
	// [22] = [WRITE] newEditionPDA
	// ··········· New Edition (pda of ['metadata', program id, mint id, 'edition'])
	//
	// [23] = [WRITE] masterEdition
	// ··········· Master Edition of token in vault V2 (pda of ['metadata', program id, master metadata mint id, 'edition']) PDA is relative to token metadata.
	//
	// [24] = [WRITE] newTokenMint
	// ··········· Mint of new token
	//
	// [25] = [WRITE] editionPDA
	// ··········· Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number])
	// ··········· where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE). PDA is relative to token metadata.
	//
	// [26] = [SIGNER] mintAuthority
	// ··········· Mint authority of new mint - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY
	//
	// [27] = [] metadataAccount
	// ··········· Metadata account of token in vault
	//
	// [28] = [] auctionDataExtended
	// ··········· Auction data extended - pda of ['auction', auction program id, vault key, 'extended'] relative to auction program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRedeemParticipationBidV3InstructionBuilder creates a new `RedeemParticipationBidV3` instruction builder.
func NewRedeemParticipationBidV3InstructionBuilder() *RedeemParticipationBidV3 {
	nd := &RedeemParticipationBidV3{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 29),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *RedeemParticipationBidV3) SetArgs(args RedeemParticipationBidV3Args) *RedeemParticipationBidV3 {
	inst.Args = &args
	return inst
}

// SetAuctionManagerAccount sets the "auctionManager" account.
// Auction manager
func (inst *RedeemParticipationBidV3) SetAuctionManagerAccount(auctionManager ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(auctionManager).WRITE()
	return inst
}

// GetAuctionManagerAccount gets the "auctionManager" account.
// Auction manager
func (inst *RedeemParticipationBidV3) GetAuctionManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSafetyDepositTokenStorageAccount sets the "safetyDepositTokenStorage" account.
// Safety deposit token storage account
func (inst *RedeemParticipationBidV3) SetSafetyDepositTokenStorageAccount(safetyDepositTokenStorage ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(safetyDepositTokenStorage).WRITE()
	return inst
}

// GetSafetyDepositTokenStorageAccount gets the "safetyDepositTokenStorage" account.
// Safety deposit token storage account
func (inst *RedeemParticipationBidV3) GetSafetyDepositTokenStorageAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSingleItemAccount sets the "singleItemAccount" account.
// Account containing 1 token of your new mint type.
// MUST be an associated token account of pda [wallet, token program, mint] relative to ata program.
func (inst *RedeemParticipationBidV3) SetSingleItemAccount(singleItemAccount ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(singleItemAccount).WRITE()
	return inst
}

// GetSingleItemAccount gets the "singleItemAccount" account.
// Account containing 1 token of your new mint type.
// MUST be an associated token account of pda [wallet, token program, mint] relative to ata program.
func (inst *RedeemParticipationBidV3) GetSingleItemAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBidRedemptionKeyAccount sets the "bidRedemptionKey" account.
// Bid redemption key -
// Just a PDA with seed ['metaplex', auction_key, bidder_metadata_key] that we will allocate to mark that you redeemed your bid
func (inst *RedeemParticipationBidV3) SetBidRedemptionKeyAccount(bidRedemptionKey ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(bidRedemptionKey).WRITE()
	return inst
}

// GetBidRedemptionKeyAccount gets the "bidRedemptionKey" account.
// Bid redemption key -
// Just a PDA with seed ['metaplex', auction_key, bidder_metadata_key] that we will allocate to mark that you redeemed your bid
func (inst *RedeemParticipationBidV3) GetBidRedemptionKeyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSafetyDepositBoxAccount sets the "safetyDepositBox" account.
// Safety deposit box account
func (inst *RedeemParticipationBidV3) SetSafetyDepositBoxAccount(safetyDepositBox ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(safetyDepositBox)
	return inst
}

// GetSafetyDepositBoxAccount gets the "safetyDepositBox" account.
// Safety deposit box account
func (inst *RedeemParticipationBidV3) GetSafetyDepositBoxAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetVaultAccount sets the "vaultAccount" account.
// Vault account
func (inst *RedeemParticipationBidV3) SetVaultAccount(vaultAccount ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(vaultAccount)
	return inst
}

// GetVaultAccount gets the "vaultAccount" account.
// Vault account
func (inst *RedeemParticipationBidV3) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSafetyDepositConfigAccount sets the "safetyDepositConfig" account.
// Safety deposit config pda of ['metaplex', program id, auction manager, safety deposit]
// This account will only get used in the event this is an AuctionManagerV2
func (inst *RedeemParticipationBidV3) SetSafetyDepositConfigAccount(safetyDepositConfig ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(safetyDepositConfig).WRITE()
	return inst
}

// GetSafetyDepositConfigAccount gets the "safetyDepositConfig" account.
// Safety deposit config pda of ['metaplex', program id, auction manager, safety deposit]
// This account will only get used in the event this is an AuctionManagerV2
func (inst *RedeemParticipationBidV3) GetSafetyDepositConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAuctionAccount sets the "auction" account.
// Auction
func (inst *RedeemParticipationBidV3) SetAuctionAccount(auction ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(auction)
	return inst
}

// GetAuctionAccount gets the "auction" account.
// Auction
func (inst *RedeemParticipationBidV3) GetAuctionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetBidderMetadataAccount sets the "bidderMetadata" account.
// Your BidderMetadata account
func (inst *RedeemParticipationBidV3) SetBidderMetadataAccount(bidderMetadata ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(bidderMetadata)
	return inst
}

// GetBidderMetadataAccount gets the "bidderMetadata" account.
// Your BidderMetadata account
func (inst *RedeemParticipationBidV3) GetBidderMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetBidderAccount sets the "bidder" account.
// Your Bidder account
func (inst *RedeemParticipationBidV3) SetBidderAccount(bidder ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(bidder)
	return inst
}

// GetBidderAccount gets the "bidder" account.
// Your Bidder account
func (inst *RedeemParticipationBidV3) GetBidderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetPayerAccount sets the "payer" account.
// Payer
func (inst *RedeemParticipationBidV3) SetPayerAccount(payer ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(payer).SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// Payer
func (inst *RedeemParticipationBidV3) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
// Token program
func (inst *RedeemParticipationBidV3) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
// Token program
func (inst *RedeemParticipationBidV3) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetTokenVaultProgramAccount sets the "tokenVaultProgram" account.
// Token Vault program
func (inst *RedeemParticipationBidV3) SetTokenVaultProgramAccount(tokenVaultProgram ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tokenVaultProgram)
	return inst
}

// GetTokenVaultProgramAccount gets the "tokenVaultProgram" account.
// Token Vault program
func (inst *RedeemParticipationBidV3) GetTokenVaultProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
// Token metadata program
func (inst *RedeemParticipationBidV3) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
// Token metadata program
func (inst *RedeemParticipationBidV3) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetStoreAccount sets the "store" account.
// Store
func (inst *RedeemParticipationBidV3) SetStoreAccount(store ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(store)
	return inst
}

// GetStoreAccount gets the "store" account.
// Store
func (inst *RedeemParticipationBidV3) GetStoreAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetSystemAccount sets the "system" account.
// System
func (inst *RedeemParticipationBidV3) SetSystemAccount(system ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(system)
	return inst
}

// GetSystemAccount gets the "system" account.
// System
func (inst *RedeemParticipationBidV3) GetSystemAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetRentSysvarAccount sets the "rentSysvar" account.
// Rent sysvar
func (inst *RedeemParticipationBidV3) SetRentSysvarAccount(rentSysvar ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(rentSysvar)
	return inst
}

// GetRentSysvarAccount gets the "rentSysvar" account.
// Rent sysvar
func (inst *RedeemParticipationBidV3) GetRentSysvarAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetTransferAuthorityAccount sets the "transferAuthority" account.
// Transfer authority to move the payment in the auction's token_mint coin from the bidder account for the participation_fixed_price
// on the auction manager to the auction manager account itself.
func (inst *RedeemParticipationBidV3) SetTransferAuthorityAccount(transferAuthority ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(transferAuthority).SIGNER()
	return inst
}

// GetTransferAuthorityAccount gets the "transferAuthority" account.
// Transfer authority to move the payment in the auction's token_mint coin from the bidder account for the participation_fixed_price
// on the auction manager to the auction manager account itself.
func (inst *RedeemParticipationBidV3) GetTransferAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetAcceptPaymentAccount sets the "acceptPayment" account.
// The accept payment account for the auction manager
func (inst *RedeemParticipationBidV3) SetAcceptPaymentAccount(acceptPayment ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(acceptPayment).WRITE()
	return inst
}

// GetAcceptPaymentAccount gets the "acceptPayment" account.
// The accept payment account for the auction manager
func (inst *RedeemParticipationBidV3) GetAcceptPaymentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetTokenAccount sets the "tokenAccount" account.
// The token account you will potentially pay for the open edition bid with if necessary.
func (inst *RedeemParticipationBidV3) SetTokenAccount(tokenAccount ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(tokenAccount).WRITE()
	return inst
}

// GetTokenAccount gets the "tokenAccount" account.
// The token account you will potentially pay for the open edition bid with if necessary.
func (inst *RedeemParticipationBidV3) GetTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

// SetPrizeTrackingTicketAccount sets the "prizeTrackingTicket" account.
// Prize tracking ticket (pda of ['metaplex', program id, auction manager key, metadata mint id])
func (inst *RedeemParticipationBidV3) SetPrizeTrackingTicketAccount(prizeTrackingTicket ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(prizeTrackingTicket).WRITE()
	return inst
}

// GetPrizeTrackingTicketAccount gets the "prizeTrackingTicket" account.
// Prize tracking ticket (pda of ['metaplex', program id, auction manager key, metadata mint id])
func (inst *RedeemParticipationBidV3) GetPrizeTrackingTicketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(20)
}

// SetNewMetadataKeyAccount sets the "newMetadataKey" account.
// New Metadata key (pda of ['metadata', program id, mint id])
func (inst *RedeemParticipationBidV3) SetNewMetadataKeyAccount(newMetadataKey ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[21] = ag_solanago.Meta(newMetadataKey).WRITE()
	return inst
}

// GetNewMetadataKeyAccount gets the "newMetadataKey" account.
// New Metadata key (pda of ['metadata', program id, mint id])
func (inst *RedeemParticipationBidV3) GetNewMetadataKeyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(21)
}

// SetNewEditionPDAAccount sets the "newEditionPDA" account.
// New Edition (pda of ['metadata', program id, mint id, 'edition'])
func (inst *RedeemParticipationBidV3) SetNewEditionPDAAccount(newEditionPDA ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[22] = ag_solanago.Meta(newEditionPDA).WRITE()
	return inst
}

// GetNewEditionPDAAccount gets the "newEditionPDA" account.
// New Edition (pda of ['metadata', program id, mint id, 'edition'])
func (inst *RedeemParticipationBidV3) GetNewEditionPDAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(22)
}

// SetMasterEditionAccount sets the "masterEdition" account.
// Master Edition of token in vault V2 (pda of ['metadata', program id, master metadata mint id, 'edition']) PDA is relative to token metadata.
func (inst *RedeemParticipationBidV3) SetMasterEditionAccount(masterEdition ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[23] = ag_solanago.Meta(masterEdition).WRITE()
	return inst
}

// GetMasterEditionAccount gets the "masterEdition" account.
// Master Edition of token in vault V2 (pda of ['metadata', program id, master metadata mint id, 'edition']) PDA is relative to token metadata.
func (inst *RedeemParticipationBidV3) GetMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(23)
}

// SetNewTokenMintAccount sets the "newTokenMint" account.
// Mint of new token
func (inst *RedeemParticipationBidV3) SetNewTokenMintAccount(newTokenMint ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[24] = ag_solanago.Meta(newTokenMint).WRITE()
	return inst
}

// GetNewTokenMintAccount gets the "newTokenMint" account.
// Mint of new token
func (inst *RedeemParticipationBidV3) GetNewTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(24)
}

// SetEditionPDAAccount sets the "editionPDA" account.
// Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number])
// where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE). PDA is relative to token metadata.
func (inst *RedeemParticipationBidV3) SetEditionPDAAccount(editionPDA ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[25] = ag_solanago.Meta(editionPDA).WRITE()
	return inst
}

// GetEditionPDAAccount gets the "editionPDA" account.
// Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number])
// where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE). PDA is relative to token metadata.
func (inst *RedeemParticipationBidV3) GetEditionPDAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(25)
}

// SetMintAuthorityAccount sets the "mintAuthority" account.
// Mint authority of new mint - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY
func (inst *RedeemParticipationBidV3) SetMintAuthorityAccount(mintAuthority ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[26] = ag_solanago.Meta(mintAuthority).SIGNER()
	return inst
}

// GetMintAuthorityAccount gets the "mintAuthority" account.
// Mint authority of new mint - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY
func (inst *RedeemParticipationBidV3) GetMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(26)
}

// SetMetadataAccount sets the "metadataAccount" account.
// Metadata account of token in vault
func (inst *RedeemParticipationBidV3) SetMetadataAccount(metadataAccount ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[27] = ag_solanago.Meta(metadataAccount)
	return inst
}

// GetMetadataAccount gets the "metadataAccount" account.
// Metadata account of token in vault
func (inst *RedeemParticipationBidV3) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(27)
}

// SetAuctionDataExtendedAccount sets the "auctionDataExtended" account.
// Auction data extended - pda of ['auction', auction program id, vault key, 'extended'] relative to auction program
func (inst *RedeemParticipationBidV3) SetAuctionDataExtendedAccount(auctionDataExtended ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	inst.AccountMetaSlice[28] = ag_solanago.Meta(auctionDataExtended)
	return inst
}

// GetAuctionDataExtendedAccount gets the "auctionDataExtended" account.
// Auction data extended - pda of ['auction', auction program id, vault key, 'extended'] relative to auction program
func (inst *RedeemParticipationBidV3) GetAuctionDataExtendedAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(28)
}

func (inst RedeemParticipationBidV3) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_RedeemParticipationBidV3),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RedeemParticipationBidV3) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RedeemParticipationBidV3) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.AuctionManager is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SafetyDepositTokenStorage is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SingleItemAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.BidRedemptionKey is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SafetyDepositBox is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.VaultAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SafetyDepositConfig is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Auction is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.BidderMetadata is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Bidder is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TokenVaultProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.Store is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.System is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.RentSysvar is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.TransferAuthority is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.AcceptPayment is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.TokenAccount is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.PrizeTrackingTicket is not set")
		}
		if inst.AccountMetaSlice[21] == nil {
			return errors.New("accounts.NewMetadataKey is not set")
		}
		if inst.AccountMetaSlice[22] == nil {
			return errors.New("accounts.NewEditionPDA is not set")
		}
		if inst.AccountMetaSlice[23] == nil {
			return errors.New("accounts.MasterEdition is not set")
		}
		if inst.AccountMetaSlice[24] == nil {
			return errors.New("accounts.NewTokenMint is not set")
		}
		if inst.AccountMetaSlice[25] == nil {
			return errors.New("accounts.EditionPDA is not set")
		}
		if inst.AccountMetaSlice[26] == nil {
			return errors.New("accounts.MintAuthority is not set")
		}
		if inst.AccountMetaSlice[27] == nil {
			return errors.New("accounts.MetadataAccount is not set")
		}
		if inst.AccountMetaSlice[28] == nil {
			return errors.New("accounts.AuctionDataExtended is not set")
		}
	}
	return nil
}

func (inst *RedeemParticipationBidV3) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RedeemParticipationBidV3")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=29]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           auctionManager", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("safetyDepositTokenStorage", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("               singleItem", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         bidRedemptionKey", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         safetyDepositBox", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                    vault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("      safetyDepositConfig", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                  auction", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("           bidderMetadata", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                   bidder", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                    payer", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("             tokenProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("        tokenVaultProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("     tokenMetadataProgram", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("                    store", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("                   system", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("               rentSysvar", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("        transferAuthority", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("            acceptPayment", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("                    token", inst.AccountMetaSlice.Get(19)))
						accountsBranch.Child(ag_format.Meta("      prizeTrackingTicket", inst.AccountMetaSlice.Get(20)))
						accountsBranch.Child(ag_format.Meta("           newMetadataKey", inst.AccountMetaSlice.Get(21)))
						accountsBranch.Child(ag_format.Meta("            newEditionPDA", inst.AccountMetaSlice.Get(22)))
						accountsBranch.Child(ag_format.Meta("            masterEdition", inst.AccountMetaSlice.Get(23)))
						accountsBranch.Child(ag_format.Meta("             newTokenMint", inst.AccountMetaSlice.Get(24)))
						accountsBranch.Child(ag_format.Meta("               editionPDA", inst.AccountMetaSlice.Get(25)))
						accountsBranch.Child(ag_format.Meta("            mintAuthority", inst.AccountMetaSlice.Get(26)))
						accountsBranch.Child(ag_format.Meta("                 metadata", inst.AccountMetaSlice.Get(27)))
						accountsBranch.Child(ag_format.Meta("      auctionDataExtended", inst.AccountMetaSlice.Get(28)))
					})
				})
		})
}

func (obj RedeemParticipationBidV3) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *RedeemParticipationBidV3) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewRedeemParticipationBidV3Instruction declares a new RedeemParticipationBidV3 instruction with the provided parameters and accounts.
func NewRedeemParticipationBidV3Instruction(
	// Parameters:
	args RedeemParticipationBidV3Args,
	// Accounts:
	auctionManager ag_solanago.PublicKey,
	safetyDepositTokenStorage ag_solanago.PublicKey,
	singleItemAccount ag_solanago.PublicKey,
	bidRedemptionKey ag_solanago.PublicKey,
	safetyDepositBox ag_solanago.PublicKey,
	vaultAccount ag_solanago.PublicKey,
	safetyDepositConfig ag_solanago.PublicKey,
	auction ag_solanago.PublicKey,
	bidderMetadata ag_solanago.PublicKey,
	bidder ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	tokenVaultProgram ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey,
	store ag_solanago.PublicKey,
	system ag_solanago.PublicKey,
	rentSysvar ag_solanago.PublicKey,
	transferAuthority ag_solanago.PublicKey,
	acceptPayment ag_solanago.PublicKey,
	tokenAccount ag_solanago.PublicKey,
	prizeTrackingTicket ag_solanago.PublicKey,
	newMetadataKey ag_solanago.PublicKey,
	newEditionPDA ag_solanago.PublicKey,
	masterEdition ag_solanago.PublicKey,
	newTokenMint ag_solanago.PublicKey,
	editionPDA ag_solanago.PublicKey,
	mintAuthority ag_solanago.PublicKey,
	metadataAccount ag_solanago.PublicKey,
	auctionDataExtended ag_solanago.PublicKey) *RedeemParticipationBidV3 {
	return NewRedeemParticipationBidV3InstructionBuilder().
		SetArgs(args).
		SetAuctionManagerAccount(auctionManager).
		SetSafetyDepositTokenStorageAccount(safetyDepositTokenStorage).
		SetSingleItemAccount(singleItemAccount).
		SetBidRedemptionKeyAccount(bidRedemptionKey).
		SetSafetyDepositBoxAccount(safetyDepositBox).
		SetVaultAccount(vaultAccount).
		SetSafetyDepositConfigAccount(safetyDepositConfig).
		SetAuctionAccount(auction).
		SetBidderMetadataAccount(bidderMetadata).
		SetBidderAccount(bidder).
		SetPayerAccount(payer).
		SetTokenProgramAccount(tokenProgram).
		SetTokenVaultProgramAccount(tokenVaultProgram).
		SetTokenMetadataProgramAccount(tokenMetadataProgram).
		SetStoreAccount(store).
		SetSystemAccount(system).
		SetRentSysvarAccount(rentSysvar).
		SetTransferAuthorityAccount(transferAuthority).
		SetAcceptPaymentAccount(acceptPayment).
		SetTokenAccount(tokenAccount).
		SetPrizeTrackingTicketAccount(prizeTrackingTicket).
		SetNewMetadataKeyAccount(newMetadataKey).
		SetNewEditionPDAAccount(newEditionPDA).
		SetMasterEditionAccount(masterEdition).
		SetNewTokenMintAccount(newTokenMint).
		SetEditionPDAAccount(editionPDA).
		SetMintAuthorityAccount(mintAuthority).
		SetMetadataAccount(metadataAccount).
		SetAuctionDataExtendedAccount(auctionDataExtended)
}
