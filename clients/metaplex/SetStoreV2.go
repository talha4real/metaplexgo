// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package metaplex

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Given a signer wallet, create a store with pda ['metaplex', wallet] (if it does not exist) and/or update it
// (if it already exists). Stores can be set to open (anybody can publish) or closed (publish only via whitelist).
type SetStoreV2 struct {
	Args *SetStoreV2Args

	// [0] = [WRITE] storeKey
	// ··········· The store key, seed of ['metaplex', admin wallet]
	//
	// [1] = [WRITE] storeConfigKey
	// ··········· The store config key, seed of ['metaplex', store key]
	//
	// [2] = [SIGNER] adminWallet
	// ··········· The admin wallet
	//
	// [3] = [SIGNER] payer
	// ··········· Payer
	//
	// [4] = [] tokenProgram
	// ··········· Token program
	//
	// [5] = [] tokenVaultProgram
	// ··········· Token vault program
	//
	// [6] = [] tokenMetadataProgram
	// ··········· Token metadata program
	//
	// [7] = [] auctionProgram
	// ··········· Auction program
	//
	// [8] = [] system
	// ··········· System
	//
	// [9] = [] rentSysvar
	// ··········· Rent sysvar
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetStoreV2InstructionBuilder creates a new `SetStoreV2` instruction builder.
func NewSetStoreV2InstructionBuilder() *SetStoreV2 {
	nd := &SetStoreV2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *SetStoreV2) SetArgs(args SetStoreV2Args) *SetStoreV2 {
	inst.Args = &args
	return inst
}

// SetStoreKeyAccount sets the "storeKey" account.
// The store key, seed of ['metaplex', admin wallet]
func (inst *SetStoreV2) SetStoreKeyAccount(storeKey ag_solanago.PublicKey) *SetStoreV2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(storeKey).WRITE()
	return inst
}

// GetStoreKeyAccount gets the "storeKey" account.
// The store key, seed of ['metaplex', admin wallet]
func (inst *SetStoreV2) GetStoreKeyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStoreConfigKeyAccount sets the "storeConfigKey" account.
// The store config key, seed of ['metaplex', store key]
func (inst *SetStoreV2) SetStoreConfigKeyAccount(storeConfigKey ag_solanago.PublicKey) *SetStoreV2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(storeConfigKey).WRITE()
	return inst
}

// GetStoreConfigKeyAccount gets the "storeConfigKey" account.
// The store config key, seed of ['metaplex', store key]
func (inst *SetStoreV2) GetStoreConfigKeyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAdminWalletAccount sets the "adminWallet" account.
// The admin wallet
func (inst *SetStoreV2) SetAdminWalletAccount(adminWallet ag_solanago.PublicKey) *SetStoreV2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(adminWallet).SIGNER()
	return inst
}

// GetAdminWalletAccount gets the "adminWallet" account.
// The admin wallet
func (inst *SetStoreV2) GetAdminWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPayerAccount sets the "payer" account.
// Payer
func (inst *SetStoreV2) SetPayerAccount(payer ag_solanago.PublicKey) *SetStoreV2 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(payer).SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// Payer
func (inst *SetStoreV2) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
// Token program
func (inst *SetStoreV2) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *SetStoreV2 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
// Token program
func (inst *SetStoreV2) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenVaultProgramAccount sets the "tokenVaultProgram" account.
// Token vault program
func (inst *SetStoreV2) SetTokenVaultProgramAccount(tokenVaultProgram ag_solanago.PublicKey) *SetStoreV2 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenVaultProgram)
	return inst
}

// GetTokenVaultProgramAccount gets the "tokenVaultProgram" account.
// Token vault program
func (inst *SetStoreV2) GetTokenVaultProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
// Token metadata program
func (inst *SetStoreV2) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *SetStoreV2 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
// Token metadata program
func (inst *SetStoreV2) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAuctionProgramAccount sets the "auctionProgram" account.
// Auction program
func (inst *SetStoreV2) SetAuctionProgramAccount(auctionProgram ag_solanago.PublicKey) *SetStoreV2 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(auctionProgram)
	return inst
}

// GetAuctionProgramAccount gets the "auctionProgram" account.
// Auction program
func (inst *SetStoreV2) GetAuctionProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSystemAccount sets the "system" account.
// System
func (inst *SetStoreV2) SetSystemAccount(system ag_solanago.PublicKey) *SetStoreV2 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(system)
	return inst
}

// GetSystemAccount gets the "system" account.
// System
func (inst *SetStoreV2) GetSystemAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetRentSysvarAccount sets the "rentSysvar" account.
// Rent sysvar
func (inst *SetStoreV2) SetRentSysvarAccount(rentSysvar ag_solanago.PublicKey) *SetStoreV2 {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(rentSysvar)
	return inst
}

// GetRentSysvarAccount gets the "rentSysvar" account.
// Rent sysvar
func (inst *SetStoreV2) GetRentSysvarAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst SetStoreV2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_SetStoreV2),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetStoreV2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetStoreV2) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.StoreKey is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.StoreConfigKey is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AdminWallet is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenVaultProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.AuctionProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.System is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.RentSysvar is not set")
		}
	}
	return nil
}

func (inst *SetStoreV2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetStoreV2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            storeKey", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      storeConfigKey", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         adminWallet", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("               payer", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        tokenProgram", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   tokenVaultProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("tokenMetadataProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      auctionProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("              system", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("          rentSysvar", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj SetStoreV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetStoreV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewSetStoreV2Instruction declares a new SetStoreV2 instruction with the provided parameters and accounts.
func NewSetStoreV2Instruction(
	// Parameters:
	args SetStoreV2Args,
	// Accounts:
	storeKey ag_solanago.PublicKey,
	storeConfigKey ag_solanago.PublicKey,
	adminWallet ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	tokenVaultProgram ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey,
	auctionProgram ag_solanago.PublicKey,
	system ag_solanago.PublicKey,
	rentSysvar ag_solanago.PublicKey) *SetStoreV2 {
	return NewSetStoreV2InstructionBuilder().
		SetArgs(args).
		SetStoreKeyAccount(storeKey).
		SetStoreConfigKeyAccount(storeConfigKey).
		SetAdminWalletAccount(adminWallet).
		SetPayerAccount(payer).
		SetTokenProgramAccount(tokenProgram).
		SetTokenVaultProgramAccount(tokenVaultProgram).
		SetTokenMetadataProgramAccount(tokenMetadataProgram).
		SetAuctionProgramAccount(auctionProgram).
		SetSystemAccount(system).
		SetRentSysvarAccount(rentSysvar)
}
