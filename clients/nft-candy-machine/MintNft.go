// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package nft_candy_machine

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MintNft is the `mintNft` instruction.
type MintNft struct {

	// [0] = [] config
	//
	// [1] = [WRITE] candyMachine
	//
	// [2] = [WRITE, SIGNER] payer
	//
	// [3] = [WRITE] wallet
	//
	// [4] = [WRITE] metadata
	//
	// [5] = [WRITE] mint
	//
	// [6] = [SIGNER] mintAuthority
	//
	// [7] = [SIGNER] updateAuthority
	//
	// [8] = [WRITE] masterEdition
	//
	// [9] = [] tokenMetadataProgram
	//
	// [10] = [] tokenProgram
	//
	// [11] = [] systemProgram
	//
	// [12] = [] rent
	//
	// [13] = [] clock
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewMintNftInstructionBuilder creates a new `MintNft` instruction builder.
func NewMintNftInstructionBuilder() *MintNft {
	nd := &MintNft{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	return nd
}

// SetConfigAccount sets the "config" account.
func (inst *MintNft) SetConfigAccount(config ag_solanago.PublicKey) *MintNft {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *MintNft) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetCandyMachineAccount sets the "candyMachine" account.
func (inst *MintNft) SetCandyMachineAccount(candyMachine ag_solanago.PublicKey) *MintNft {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(candyMachine).WRITE()
	return inst
}

// GetCandyMachineAccount gets the "candyMachine" account.
func (inst *MintNft) GetCandyMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetPayerAccount sets the "payer" account.
func (inst *MintNft) SetPayerAccount(payer ag_solanago.PublicKey) *MintNft {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *MintNft) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetWalletAccount sets the "wallet" account.
func (inst *MintNft) SetWalletAccount(wallet ag_solanago.PublicKey) *MintNft {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(wallet).WRITE()
	return inst
}

// GetWalletAccount gets the "wallet" account.
func (inst *MintNft) GetWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetMetadataAccount sets the "metadata" account.
func (inst *MintNft) SetMetadataAccount(metadata ag_solanago.PublicKey) *MintNft {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(metadata).WRITE()
	return inst
}

// GetMetadataAccount gets the "metadata" account.
func (inst *MintNft) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetMintAccount sets the "mint" account.
func (inst *MintNft) SetMintAccount(mint ag_solanago.PublicKey) *MintNft {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *MintNft) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetMintAuthorityAccount sets the "mintAuthority" account.
func (inst *MintNft) SetMintAuthorityAccount(mintAuthority ag_solanago.PublicKey) *MintNft {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(mintAuthority).SIGNER()
	return inst
}

// GetMintAuthorityAccount gets the "mintAuthority" account.
func (inst *MintNft) GetMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

// SetUpdateAuthorityAccount sets the "updateAuthority" account.
func (inst *MintNft) SetUpdateAuthorityAccount(updateAuthority ag_solanago.PublicKey) *MintNft {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(updateAuthority).SIGNER()
	return inst
}

// GetUpdateAuthorityAccount gets the "updateAuthority" account.
func (inst *MintNft) GetUpdateAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7]
}

// SetMasterEditionAccount sets the "masterEdition" account.
func (inst *MintNft) SetMasterEditionAccount(masterEdition ag_solanago.PublicKey) *MintNft {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(masterEdition).WRITE()
	return inst
}

// GetMasterEditionAccount gets the "masterEdition" account.
func (inst *MintNft) GetMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[8]
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
func (inst *MintNft) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *MintNft {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
func (inst *MintNft) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[9]
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *MintNft) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MintNft {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *MintNft) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[10]
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *MintNft) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MintNft {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *MintNft) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[11]
}

// SetRentAccount sets the "rent" account.
func (inst *MintNft) SetRentAccount(rent ag_solanago.PublicKey) *MintNft {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *MintNft) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[12]
}

// SetClockAccount sets the "clock" account.
func (inst *MintNft) SetClockAccount(clock ag_solanago.PublicKey) *MintNft {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *MintNft) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[13]
}

func (inst MintNft) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MintNft,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MintNft) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MintNft) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.CandyMachine is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Wallet is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.MintAuthority is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.UpdateAuthority is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.MasterEdition is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Clock is not set")
		}
	}
	return nil
}

func (inst *MintNft) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MintNft")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("              config", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("        candyMachine", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("               payer", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("              wallet", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("            metadata", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("                mint", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta("       mintAuthority", inst.AccountMetaSlice[6]))
						accountsBranch.Child(ag_format.Meta("     updateAuthority", inst.AccountMetaSlice[7]))
						accountsBranch.Child(ag_format.Meta("       masterEdition", inst.AccountMetaSlice[8]))
						accountsBranch.Child(ag_format.Meta("tokenMetadataProgram", inst.AccountMetaSlice[9]))
						accountsBranch.Child(ag_format.Meta("        tokenProgram", inst.AccountMetaSlice[10]))
						accountsBranch.Child(ag_format.Meta("       systemProgram", inst.AccountMetaSlice[11]))
						accountsBranch.Child(ag_format.Meta("                rent", inst.AccountMetaSlice[12]))
						accountsBranch.Child(ag_format.Meta("               clock", inst.AccountMetaSlice[13]))
					})
				})
		})
}

func (obj MintNft) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *MintNft) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewMintNftInstruction declares a new MintNft instruction with the provided parameters and accounts.
func NewMintNftInstruction(
	// Accounts:
	config ag_solanago.PublicKey,
	candyMachine ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	wallet ag_solanago.PublicKey,
	metadata ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	mintAuthority ag_solanago.PublicKey,
	updateAuthority ag_solanago.PublicKey,
	masterEdition ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	clock ag_solanago.PublicKey) *MintNft {
	return NewMintNftInstructionBuilder().
		SetConfigAccount(config).
		SetCandyMachineAccount(candyMachine).
		SetPayerAccount(payer).
		SetWalletAccount(wallet).
		SetMetadataAccount(metadata).
		SetMintAccount(mint).
		SetMintAuthorityAccount(mintAuthority).
		SetUpdateAuthorityAccount(updateAuthority).
		SetMasterEditionAccount(masterEdition).
		SetTokenMetadataProgramAccount(tokenMetadataProgram).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent).
		SetClockAccount(clock)
}
